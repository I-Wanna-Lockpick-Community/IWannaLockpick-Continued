<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDoor</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>maskDoor</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spending more than 1 of a key
color = 0;
colorSpend = 0;//Can spend a key type other than the required one
count = 1;
type = 0;//0 = Normal, 1 = Blast, 2 = Swap, 3 = Zero
copies = 1;//Number of copies for the negative master key system
aura[0] = 0;//Red aura
aura[1] = 0;//Green aura
aura[2] = 0;//Blue aura
browned = 0;
w = 1;
h = 1;
//Copy animation variables
copyState = 0;//0 = Nothing happening, 1 = Adding copy, 2 = Removing copy
copyPitch = 1;
copyAlpha = 0;
copySound = 0;
copyTimer = 0;
copyDraw = 1;

//Three blends for the top, middle, and bottom.
c1 = c_white;
c2 = c_white;
c3 = c_white;
c4 = c_white;
c5 = c_white;
c6 = c_white;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door-Copy Code
switch copyState{
    case 0://Nothing really
        
    break;
    case 1://Adding a copy!
        copyPitch += 0.015;
        audio_sound_pitch(copySound,copyPitch);
        copyTimer = min(copyTimer + 1, 50);
        copyAlpha = max(copyAlpha - 0.02, 0);
        if copyTimer == 50{
            copyState = 0;
        }
        //Use blend mode: bm_inv_dest_color, bm_inv_src_alpha, start at 1 and go to 0
    break;
    case 2://Destroying a copy!
        copyTimer = min(copyTimer + 1, 60);
        if copyTimer == 25{
            scrPlaySoundExt(sndCopy1,1,1,false);
        }
        if copyTimer == 40{
            scrPlaySoundExt(sndMasterRelock,1,1,false);
        }
        if copyTimer == 50{
            copyDraw = 1;
            copyAlpha = 1;
        }
        if copyTimer &gt; 50{
            copyAlpha = max(copyAlpha - 0.1, 0);
        }
        if copyTimer == 60{
            copyState = 0;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAIN KEY CODE
/*if !instance_exists(objPlayer){exit;}
if copyState != 0{exit;}
if aura[0] == 1 || aura[1] == 1 || aura[2] == 1{
    if distance_to_object(objPlayer) &lt;= 26{
        removeAuras();
    }
    exit;
}
if distance_to_object(objPlayer) &lt;= 1{
    if objPlayer.masterMode == 1 &amp;&amp; (global.key[0] &gt; 0 || global.infinity[0] == 1){//SPEND MASTER KEYS
        objPlayer.masterMode = 0;
        global.key[0] -= 1;
        audio_play_sound(sndMasterUnlock,0,false);
        if copies == 1{
            event_user(0);
            instance_destroy();
        }
        if copies &gt; 1{
            copies -= 1;
            event_user(2);
        }
    }else if objPlayer.masterMode == 0{//SPEND NORMAL KEYS
        if type == 0{//Normal
            if canOpen(color){
                global.key[colorSpend] -= count;
                scrOpenOrCopy();
            }
        }
        if type == 1{//Zero
            if canOpen(color){
                scrOpenOrCopy();
            }
        }
        if type == 2{//Blast
            if canOpen(color){
                global.key[colorSpend] = 0;
                global.infinity[colorSpend] = 0;
                scrOpenOrCopy();
            }
        }
        if type == 3{//Swap
            if canOpen(color){
                global.key[colorSpend] *= -1;
                global.infinity[colorSpend] *= -1;
                scrOpenOrCopy();
            }
        }
        if type == 4{//INFINITY
            if canOpen(color){
                if global.infinity[colorSpend] == 1 &amp;&amp; count &gt;= 0{
                    global.infinity[colorSpend] = 0;
                    global.key[colorSpend] = 0;
                }else if global.infinity[colorSpend] == -1 &amp;&amp; count &lt; 0{
                    global.infinity[colorSpend] = 0;
                    global.key[colorSpend] = 0;
                }else if global.infinity[colorSpend] &lt;= 0 &amp;&amp; count &gt;= 0{
                    global.infinity[colorSpend] = -1;
                }else if global.infinity[colorSpend] &gt;= 0 &amp;&amp; count &lt; 0{
                    global.infinity[colorSpend] = 1;
                }
                scrOpenOrCopy();
            }
        }
    }else if objPlayer.masterMode == -1 &amp;&amp; (global.key[0] &lt; 0 || global.infinity[0] == -1){
        objPlayer.masterMode = 0;
        global.key[0] += 1;
        copies += 1;
        audio_play_sound(sndMasterRelock,0,false);
        event_user(1);
    }
}

useMasterCheck();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Copy debris
copyState = 2;
copyDraw = 0;
copyAlpha = 0;
copyTimer = 0;
for(var ix = 0; ix&lt;(2*w); ix+=1){
    for(var iy = 0; iy&lt;(2*h); iy+=1){
        with(instance_create(x+16*ix,y+16*iy,oDebris3)){
            c1 = other.c1;
            c2 = other.c2;
            c3 = other.c3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-debris
copyState = 1;
copySound = scrPlaySoundExt(sndMasterUnlock2,1,1,false);
copyPitch = 1;
copyAlpha = 0;
copyTimer = 0;
for(var ix = 0; ix&lt;(2*w); ix+=1){
    for(var iy = 0; iy&lt;(2*h); iy+=1){
        with(instance_create(x+16*ix,y+16*iy,oDebris2)){
            c1 = other.c1;
            c2 = other.c2;
            c3 = other.c3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make debris
for(var ix = 0; ix&lt;(2*w); ix+=1){
    for(var iy = 0; iy&lt;(2*h); iy+=1){
        with(instance_create(x+16*ix,y+16*iy,oDebris)){
            c1 = other.c1;
            c2 = other.c2;
            c3 = other.c3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrColorDoor();
scrColorDoor2();

image_xscale = w;
image_yscale = h;

if (w==1&amp;&amp;h==2){
    image_xscale = 1;
    image_yscale = 1;
    mask_index = maskDoor1x2;
}
if (w==2&amp;&amp;h==2){
    image_xscale = 1;
    image_yscale = 1;
    mask_index = maskDoor2x2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main draw
if copyDraw == 1{
if count &gt;= 0{
    ///Spend Keys
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,1,16,0,16,16,x+16*(i+1),y,1,1,c4,1);
        draw_sprite_part_ext(sprDoorBig,3,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c6,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,2,0,16,16,16,x,y+16*(i+1),1,1,c5,1);
        draw_sprite_part_ext(sprDoorBig,2,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c5,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,1,0,0,16,16,x,y,1,1,c4,1);
    draw_sprite_part_ext(sprDoorBig,1,48,0,16,16,x+32*w-16,y,1,1,c4,1);
    draw_sprite_part_ext(sprDoorBig,2,0,0,16,16,x,y,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,48,0,16,16,x+32*w-16,y,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,0,48,16,16,x,y+32*h-16,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,3,0,48,16,16,x,y+32*h-16,1,1,c6,1);
    draw_sprite_part_ext(sprDoorBig,3,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c6,1);
    ///Required Keys
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,4,16,0,16,16,x+16*(i+1),y,1,1,c2,1);
        draw_sprite_part_ext(sprDoorBig,4,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c2,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,4,0,16,16,16,x,y+16*(i+1),1,1,c2,1);
        draw_sprite_part_ext(sprDoorBig,4,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c2,1);
    }
    //Middle
    for(var ix = 0; ix&lt;(2*w-3); ix+=1){
        for(var iy = 0; iy&lt;(2*h-3); iy+=1){
            draw_sprite_part_ext(sprDoorBig,4,16,16,32,32,x+32+16*(ix-1),y+32+16*(iy-1),1,1,c2,1);
        }
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,4,0,0,16,16,x,y,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,48,0,16,16,x+32*w-16,y,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,0,48,16,16,x,y+32*h-16,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c2,1);
    ///Main outline
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,0,16,0,16,16,x+16*(i+1),y,1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,0,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c_white,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,0,0,16,16,16,x,y+16*(i+1),1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,0,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c_white,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,0,0,0,16,16,x,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,48,0,16,16,x+32*w-16,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,0,48,16,16,x,y+32*h-16,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c_white,1);
    ///Symbol
    if type == 0{//Normal
        switch count{
            case 2:
                draw_sprite(sprLock2,0,x,y);
            break;
            case 3:
                draw_sprite(sprLock3,0,x,y);
            break;
            case 4:
                draw_sprite(sprLock4,0,x,y);
            break;
            case 5:
                draw_sprite(sprLock5,0,x,y);
            break;
            case 6:
                draw_sprite(sprLock6,0,x,y);
            break;
            case 8:
                draw_sprite(sprLock8,0,x,y);
            break;
            case 12:
                draw_sprite(sprLock12,0,x,y);
            break;
            case 24:
                draw_sprite(sprLock24,0,x,y);
            break;
        }
    }else{
        if type == 2{
            draw_sprite(sprSymbols,2,x+16*(w-1),y+16*(h-1));
        }
        if type == 3{
            draw_sprite(sprSymbols,3,x+16*(w-1),y+16*(h-1));
        }
    }
}
if count &lt; 0{
    ///Spend Keys
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,1,16,0,16,16,x+16*(i+1),y,1,1,c4,1);
        draw_sprite_part_ext(sprDoorBig,3,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c6,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,2,0,16,16,16,x,y+16*(i+1),1,1,c5,1);
        draw_sprite_part_ext(sprDoorBig,2,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c5,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,1,0,0,16,16,x,y,1,1,c4,1);
    draw_sprite_part_ext(sprDoorBig,1,48,0,16,16,x+32*w-16,y,1,1,c4,1);
    draw_sprite_part_ext(sprDoorBig,2,0,0,16,16,x,y,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,48,0,16,16,x+32*w-16,y,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,0,48,16,16,x,y+32*h-16,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,2,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c5,1);
    draw_sprite_part_ext(sprDoorBig,3,0,48,16,16,x,y+32*h-16,1,1,c6,1);
    draw_sprite_part_ext(sprDoorBig,3,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c6,1);
    ///Required Keys
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,4,16,0,16,16,x+16*(i+1),y,1,1,c2,1);
        draw_sprite_part_ext(sprDoorBig,4,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c2,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,4,0,16,16,16,x,y+16*(i+1),1,1,c2,1);
        draw_sprite_part_ext(sprDoorBig,4,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c2,1);
    }
    //Middle
    for(var ix = 0; ix&lt;(2*w-2); ix+=1){
        for(var iy = 0; iy&lt;(2*h-2); iy+=1){
            draw_sprite_part_ext(sprDoorBig,4,16,16,32,32,x+16*(ix-1),y+16*(iy-1),1,1,c2,1);
        }
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,4,0,0,16,16,x,y,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,48,0,16,16,x+32*w-16,y,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,0,48,16,16,x,y+32*h-16,1,1,c2,1);
    draw_sprite_part_ext(sprDoorBig,4,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c2,1);
    ///Main outline
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,5,16,0,16,16,x+16*(i+1),y,1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,5,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c_white,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,5,0,16,16,16,x,y+16*(i+1),1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,5,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c_white,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,5,0,0,16,16,x,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,48,0,16,16,x+32*w-16,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,0,48,16,16,x,y+32*h-16,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c_white,1);
    ///Symbol
    if type == 0{//Normal
        switch abs(count){
            case 2:
                draw_sprite(sprLock2,1,x,y);
            break;
            case 3:
                draw_sprite(sprLock3,1,x,y);
            break;
            case 4:
                draw_sprite(sprLock4,1,x,y);
            break;
            case 5:
                draw_sprite(sprLock5,1,x,y);
            break;
            case 6:
                draw_sprite(sprLock6,1,x,y);
            break;
            case 8:
                draw_sprite(sprLock8,1,x,y);
            break;
            case 12:
                draw_sprite(sprLock12,1,x,y);
            break;
            case 24:
                draw_sprite(sprLock24,1,x,y);
            break;
        }
    }else{
        if type == 2{
            draw_sprite(sprSymbols,5,x+16*(w-1),y+16*(h-1));
        }
        if type == 3{
            draw_sprite(sprSymbols,6,x+16*(w-1),y+16*(h-1));
        }
    }
}
//AURAS
if aura[2]{
    if w==1 &amp;&amp; h==1{
        draw_sprite(sprSol,0,x,y);
    }
    if w==1 &amp;&amp; h==2{
        draw_sprite(sprSol1x2,0,x,y);
    }
    if w==2 &amp;&amp; h==2{
        draw_sprite(sprSol2x2,0,x,y);
    }
}
if aura[1]{
    if w==1 &amp;&amp; h==1{
        draw_sprite(sprDirt,0,x,y);
    }
    if w==1 &amp;&amp; h==2{
        draw_sprite(sprDirt1x2,0,x,y);
    }
    if w==2 &amp;&amp; h==2{
        draw_sprite(sprDirt2x2,0,x,y);
    }
}
if aura[0]{
    if w==1 &amp;&amp; h==1{
        draw_sprite(sprIce,0,x,y);
    }
    if w==1 &amp;&amp; h==2{
        draw_sprite(sprIce1x2,0,x,y);
    }
    if w==2 &amp;&amp; h==2{
        draw_sprite(sprIce2x2,0,x,y);
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outline if destroyed a copy
if copyDraw == 0{
if count &gt;= 0{
    ///Main outline
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,0,16,0,16,16,x+16*(i+1),y,1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,0,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c_white,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,0,0,16,16,16,x,y+16*(i+1),1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,0,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c_white,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,0,0,0,16,16,x,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,48,0,16,16,x+32*w-16,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,0,48,16,16,x,y+32*h-16,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,0,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c_white,1);
}
if count &lt; 0{
    ///Main outline
    //Edges
    for(var i = 0; i&lt;(2*(w-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,5,16,0,16,16,x+16*(i+1),y,1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,5,16,48,16,16,x+16*(i+1),y+32*h-16,1,1,c_white,1);
    }
    for(var i = 0; i&lt;(2*(h-1)); i+=1){
        draw_sprite_part_ext(sprDoorBig,5,0,16,16,16,x,y+16*(i+1),1,1,c_white,1);
        draw_sprite_part_ext(sprDoorBig,5,48,16,16,16,x+32*w-16,y+16*(i+1),1,1,c_white,1);
    }
    //Corners
    draw_sprite_part_ext(sprDoorBig,5,0,0,16,16,x,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,48,0,16,16,x+32*w-16,y,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,0,48,16,16,x,y+32*h-16,1,1,c_white,1);
    draw_sprite_part_ext(sprDoorBig,5,48,48,16,16,x+32*w-16,y+32*h-16,1,1,c_white,1);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Copy invert + text
if copyState == 1{
    draw_set_blend_mode_ext(bm_inv_dest_color,bm_inv_src_alpha);
    draw_sprite_ext(sprBlockWhite,0,x,y,w,h,0,c_white,copyAlpha);
    draw_set_blend_mode(bm_normal);
}
if copyState == 2{
    draw_sprite_ext(sprBlockWhite,0,x,y,w,h,0,c_white,copyAlpha);
}
if copies &gt; 1 &amp;&amp; copyDraw{
    draw_set_font(fKeyX);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_set_color(make_color_rgb(62,45,28));
    //outline corners
    draw_text(x+1+16*w,y+7,"x"+string(copies));
    draw_text(x-1+16*w,y+7,"x"+string(copies));
    draw_text(x+1+16*w,y+9,"x"+string(copies));
    draw_text(x-1+16*w,y+9,"x"+string(copies));
    //outline edges
    draw_text(x+1+16*w,y+8,"x"+string(copies));
    draw_text(x-1+16*w,y+8,"x"+string(copies));
    draw_text(x+16*w,y+7,"x"+string(copies));
    draw_text(x+16*w,y+9,"x"+string(copies));
    //actual text
    draw_set_color(make_color_rgb(237,234,231));
    draw_text(x+16*w,y+8,"x"+string(copies));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

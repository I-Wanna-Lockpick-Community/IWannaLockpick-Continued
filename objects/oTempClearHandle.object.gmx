<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, t;
msgMax = 0
msgPos = 0
curText = ""
textX = 0
textY = 0
textAlpha = 0
textAngle = 0
textSin = 0
textUp = 0
clearAngle = 0
clearSin = 0
clearAlpha = 1
whiteAlpha = 0
state = 0
alarm[0] = 25
global.inCutscene = 1
solveCount = 0
for (i = 0; i &lt; 250; i += 1)
    solveCount += global.roomClear[i]
t = global.time
timeStr = (string((t div 3600)) + ":")
t %= 3600
timeStr += string((t div 600))
t %= 600
timeStr += (string((t div 60)) + ":")
t %= 60
timeStr += string((t div 10))
t %= 10
timeStr += string(floor(t))
if (global.tempClear == 0)
{
    background_visible[2] = 0
    msgMax = 7
    msg[0] = "Hello."
    msg[1] = "Congratulations on completing Ultimate Door Logic."
    msg[2] = "That puzzle is supposed to be pretty hard!"
    msg[3] = "Normally, the game would have an ending sequence here."
    msg[4] = "Since this is a demo, though, here is a simple clear screen."
    msg[5] = "I hope you have enjoyed the game so far."
    msg[6] = "Thanks for playing!"
}
else
{
    msgMax = 9
    msg[0] = "Wow!"
    msg[1] = "Congratulations on completing Chromatic Monolith!"
    msg[2] = "You are a true master of Lockpick's game mechanics."
    msg[3] = "However, there is still more to look forward to."
    msg[4] = "Eventually, Part 2 of the game will offer interesting new ideas."
    msg[5] = "I hope you'll look forward to it."
    msg[6] = "Also, thanks for playing the game this far!"
    msg[7] = "It means a lot to me that you cared that much."
    msg[8] = "Goodbye, and until next time!"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.autosave = 0
global.inCutscene = 0
scrRestartGame()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlaySoundExt(sndTitleStart, 1, 1, false)
state = 2
textAngle = 0
textAlpha = 0
whiteAlpha = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = 1
curText = msg[0]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch state
{
    case 0:
        break
    case 1:
        if (!textUp)
        {
            textAngle = min((textAngle + 2), 90)
            textSin = sin(degtorad(textAngle))
            textY = (-40 * textSin)
            textAlpha = textSin
            if (scrButtonCheckPressed(global.jumpButton) || scrButtonCheckPressed(global.shootButton))
            {
                if (textAngle == 90)
                {
                    scrPlaySoundExt(sndSelectMade, 1, 1, false)
                    textUp = 1
                    textAngle = 0
                }
            }
        }
        else
        {
            textAngle = min((textAngle + 3), 90)
            textSin = sin(degtorad(textAngle))
            textY = (-40 - (40 * textSin))
            textAlpha = (1 - textSin)
            if (textAngle == 90)
            {
                msgPos += 1
                if (msgPos &gt;= msgMax)
                {
                    if (alarm[1] &lt;= 0)
                        alarm[1] = 30
                }
                else
                {
                    curText = msg[msgPos]
                    textUp = 0
                    textAngle = 0
                }
            }
        }
        break
    case 2:
        whiteAlpha = max((whiteAlpha - 0.02), 0)
        clearAngle += ((1170 - clearAngle) * 0.03)
        clearSin = sin(degtorad(clearAngle))
        clearAlpha = (1 - (clearAngle / 1170))
        if (clearAngle &gt;= 1080)
        {
            textAngle = min((textAngle + 1), 90)
            textSin = sin(degtorad(textAngle))
            textX = (-40 + (100 * textSin))
            textAlpha = textSin
        }
        if (scrButtonCheckPressed(global.jumpButton) || scrButtonCheckPressed(global.shootButton))
        {
            if (textAngle == 90)
            {
                scrPlaySoundExt(sndSelectMade, 1, 1, false)
                audio_sound_gain(global.currentMusic, 0, 3000)
                state = 3
            }
        }
        break
    case 3:
        whiteAlpha = min((whiteAlpha + 0.01), 1)
        if ((whiteAlpha == 1) &amp;&amp; (alarm[2] &lt;= 0))
            alarm[2] = 50
        break
    default:
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.inCutscene = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 1)
{
    draw_set_font(fPresents)
    draw_set_alpha(textAlpha)
    draw_set_color(c_black)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_text(398, (280 + textY), curText)
    draw_text(402, (280 + textY), curText)
    draw_text(400, ((280 + textY) - 1), curText)
    draw_text(400, ((280 + textY) + 1), curText)
    draw_set_color(c_white)
    draw_text(400, (280 + textY), curText)
    draw_set_alpha(1)
}
else if (state &gt;= 2)
{
    draw_sprite_ext(sprGG, 0, 400, 100, clearSin, 1, 0, c_white, 1)
    draw_sprite_ext(sprGG, 1, 400, 100, clearSin, 1, 0, c_white, clearAlpha)
    draw_set_font(fPresents)
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle)
    draw_set_alpha(textAlpha)
    tempStr = ("Levels Cleared: " + string(solveCount))
    draw_set_color(c_black)
    draw_text((textX - 2), 350, tempStr)
    draw_text((textX + 2), 350, tempStr)
    draw_text(textX, 349, tempStr)
    draw_text(textX, 351, tempStr)
    draw_set_color(c_white)
    draw_text(textX, 350, tempStr)
    tempStr = ("Time Spent: " + timeStr)
    draw_set_color(c_black)
    draw_text((textX - 2), 450, tempStr)
    draw_text((textX + 2), 450, tempStr)
    draw_text(textX, 449, tempStr)
    draw_text(textX, 451, tempStr)
    draw_set_color(c_white)
    draw_text(textX, 450, tempStr)
    draw_set_alpha(1)
}
draw_set_alpha(whiteAlpha)
draw_set_color(c_white)
draw_rectangle(-1, -1, 801, 609, 0)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = 0
jump = (8.5 * global.grav)
jump2 = (7 * global.grav)
gravity = (0.4 * global.grav)
recentJump = 0
djump = 1
maxSpeed = 3
maxVspeed = 9
image_speed = 0.2
onPlatform = 0
xScale = 1
scrSetPlayerMask()
if ((global.difficulty == 0) &amp;&amp; global.gameStarted)
    instance_create(x, y, objBow)
if global.autosave
{
    scrSaveGame(1)
    global.autosave = 0
}
masterMode = 0
masterDrawAngle = 0
masterDrawScale = 0.8
brownMode = 0
brownAngle = 0
brownScale = 0.6
drawIm = 0
imAngle = 0
runState = 0
downStop = 1
downDir = 0
downTime = 0
aura[0] = 0
aura[1] = 0
aura[2] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objBow)
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var notOnBlock, onVineR, onVineL, L, R;
if (((x &lt; 0) || ((x &gt; room_width) || ((y &lt; 0) || (y &gt; room_height)))) &amp;&amp; global.edgeDeath)
{
    if global.playerAnimationFix
    {
        notOnBlock = place_free(x, (y + global.grav))
        onVineR = (place_meeting((x + 1), y, objWalljumpR) &amp;&amp; notOnBlock)
        onVineL = (place_meeting((x - 1), y, objWalljumpL) &amp;&amp; notOnBlock)
        if ((!onVineR) &amp;&amp; (!onVineL))
        {
            if (onPlatform || (!notOnBlock))
            {
                L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)))
                R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)))
                if ((L || R) &amp;&amp; (!frozen))
                {
                    sprite_index = sprPlayerRunning
                    image_speed = 0.5
                }
                else
                {
                    sprite_index = sprPlayerIdle
                    image_speed = 0.2
                }
            }
            else if ((vspeed * global.grav) &lt; 0)
            {
                sprite_index = sprPlayerJump
                image_speed = 0.5
            }
            else
            {
                sprite_index = sprPlayerFall
                image_speed = 0.5
            }
        }
        else
        {
            sprite_index = sprPlayerSliding
            image_speed = 0.5
        }
    }
}
if (global.key[4] &gt;= 1)
    aura[0] = 1
else
    aura[0] = 0
if (global.key[5] &gt;= 5)
    aura[1] = 1
else
    aura[1] = 0
if (global.key[6] &gt;= 3)
    aura[2] = 1
else
    aura[2] = 0
if (global.key[10] &gt;= 1)
    brownMode = 1
else if (global.key[10] &lt;= -1)
    brownMode = -1
else
    brownMode = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var L, R, D, U, h, slipBlockTouching, notOnBlock, onVineL, onVineR, slideBlockTouching, moveLimit, xLast, yLast, hLast, vLast, onSlope, slopeCheck, hTest, ySlope;
L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)))
R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)))
D = (scrButtonCheck(global.walkButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.walkButton)))
U = (scrButtonCheck(global.runButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.runButton)))
if U
    runState = (!global.runSwitch)
if D
    runState = 2
if ((!U) &amp;&amp; (!D))
    runState = global.runSwitch
if (runState == 1)
{
    if place_meeting(x, (y + 1), objBlock)
        maxSpeed = 6
    else
        maxSpeed = 3
}
if (runState == 2)
    maxSpeed = 1
if (runState == 0)
    maxSpeed = 3
h = 0
recentJump = 0
downTime = max((downTime - 1), 0)
if ((!frozen) &amp;&amp; (global.pmState == 0))
{
    if R
    {
        if ((downTime == 0) || (downDir != 1))
            h = 1
    }
    else if L
    {
        if ((downTime == 0) || (downDir != -1))
            h = -1
    }
}
slipBlockTouching = instance_place(x, (y + (1 * global.grav)), objSlipBlock)
notOnBlock = place_free(x, (y + global.grav))
onVineL = (place_meeting((x - 1), y, objWalljumpL) &amp;&amp; notOnBlock)
onVineR = (place_meeting((x + 1), y, objWalljumpR) &amp;&amp; notOnBlock)
if (h != 0)
{
    if ((!onVineR) &amp;&amp; (!onVineL))
        xScale = h
    if (((h == -1) &amp;&amp; (!onVineR)) || ((h == 1) &amp;&amp; (!onVineL)))
    {
        if (slipBlockTouching == noone)
            hspeed = (maxSpeed * h)
        else
        {
            hspeed += (slipBlockTouching.slip * h)
            if (abs(hspeed) &gt; maxSpeed)
                hspeed = (maxSpeed * h)
        }
        sprite_index = sprPlayerRunning
        image_speed = 0.5
    }
}
else
{
    if (slipBlockTouching == noone)
        hspeed = 0
    else if (hspeed &gt; 0)
    {
        hspeed -= slipBlockTouching.slip
        if (hspeed &lt;= 0)
            hspeed = 0
    }
    else if (hspeed &lt; 0)
    {
        hspeed += slipBlockTouching.slip
        if (hspeed &gt;= 0)
            hspeed = 0
    }
    sprite_index = sprPlayerIdle
    image_speed = 0.2
}
if (!onPlatform)
{
    if ((vspeed * global.grav) &lt; -0.05)
        sprite_index = sprPlayerJump
    else if ((vspeed * global.grav) &gt; 0.05)
        sprite_index = sprPlayerFall
}
else if (!place_meeting(x, (y + (4 * global.grav)), objPlatform))
    onPlatform = 0
slideBlockTouching = instance_place(x, (y + global.grav), objSlideBlock)
if (slideBlockTouching != noone)
    hspeed += slideBlockTouching.h
if (abs(vspeed) &gt; maxVspeed)
    vspeed = (sign(vspeed) * maxVspeed)
if (!frozen)
{
    if scrButtonCheckPressed(global.shootButton)
    {
    }
    if (scrButtonCheckPressed(global.jumpButton) &amp;&amp; (global.pmState == 0))
        scrPlayerJump()
    if (scrButtonCheckReleased(global.jumpButton) &amp;&amp; (!global.fullJumps))
        scrPlayerVJump()
}
if (onVineL || onVineR)
{
    if onVineR
        xScale = -1
    else
        xScale = 1
    vspeed = (2 * global.grav)
    sprite_index = sprPlayerSliding
    image_speed = 0.5
    if ((onVineL &amp;&amp; scrButtonCheckPressed(global.rightButton)) || (onVineR &amp;&amp; scrButtonCheckPressed(global.leftButton)))
    {
        if scrButtonCheck(global.jumpButton)
        {
            if onVineR
                hspeed = -15
            else
                hspeed = 15
            vspeed = (-9 * global.grav)
            scrPlaySoundExt(sndWallJump, 1, 1, false)
            sprite_index = sprPlayerJump
        }
        else
        {
            if onVineR
                hspeed = -3
            else
                hspeed = 3
            sprite_index = sprPlayerFall
        }
    }
}
if (instance_exists(objSlope) &amp;&amp; (hspeed != 0))
{
    moveLimit = abs(hspeed)
    if (place_meeting((x + hspeed), ((y + vspeed) + gravity), objSlope) &amp;&amp; ((((vspeed + gravity) * global.grav) &gt; 0) &amp;&amp; notOnBlock))
    {
        xLast = x
        yLast = y
        hLast = hspeed
        vLast = vspeed
        vspeed += gravity
        x += hspeed
        hspeed = 0
        if (!place_free(x, (y + vspeed)))
        {
            if (global.grav == 1)
                move_contact_solid(270, abs(vspeed))
            else
                move_contact_solid(90, abs(vspeed))
            vspeed = 0
        }
        y += vspeed
        if ((!place_free(x, (y + global.grav))) &amp;&amp; place_free(x, y))
        {
            djump = 1
            notOnBlock = 0
        }
        else
        {
            x = xLast
            y = yLast
            hspeed = hLast
            vspeed = vLast
        }
    }
    if (!notOnBlock)
    {
        onSlope = place_meeting(x, (y + global.grav), objSlope)
        slopeCheck = 1
        hTest = hspeed
        while slopeCheck
        {
            ySlope = 0
            while (((!place_meeting((x + hTest), ((y - ySlope) + global.grav), objSlope)) || (onSlope &amp;&amp; (!place_meeting((x + hTest), ((y - ySlope) + global.grav), objBlock)))) &amp;&amp; ((ySlope * global.grav) &gt; (-floor((moveLimit * (hTest / hspeed))))))
                ySlope -= global.grav
            if (place_meeting((x + hTest), ((y - ySlope) + global.grav), objSlope) || (onSlope &amp;&amp; place_meeting((x + hTest), ((y - ySlope) + global.grav), objBlock)))
            {
                if ((ySlope != 0) &amp;&amp; (!place_meeting((x + hTest), (y - ySlope), objBlock)))
                {
                    y -= ySlope
                    x += hTest
                    hspeed = 0
                    slopeCheck = 0
                }
                else if (hTest &gt; 0)
                {
                    hTest -= 1
                    if (hTest &lt;= 0)
                        slopeCheck = 0
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1
                    if (hTest &gt;= 0)
                        slopeCheck = 0
                }
                else
                    slopeCheck = 0
            }
            else
                slopeCheck = 0
        }
    }
    if place_meeting((x + hspeed), y, objSlope)
    {
        slopeCheck = 1
        hTest = hspeed
        while slopeCheck
        {
            ySlope = 0
            while (place_meeting((x + hTest), (y - ySlope), objSlope) &amp;&amp; ((ySlope * global.grav) &lt; floor((moveLimit * (hTest / hspeed)))))
                ySlope += global.grav
            if place_free((x + hTest), (y - ySlope))
            {
                y -= ySlope
                x += hTest
                hspeed = 0
                slopeCheck = 0
            }
            else if (hTest &gt; 0)
            {
                hTest -= 1
                if (hTest &lt;= 0)
                    slopeCheck = 0
            }
            else if (hTest &lt; 0)
            {
                hTest += 1
                if (hTest &gt;= 0)
                    slopeCheck = 0
            }
            else
                slopeCheck = 0
        }
    }
    xprevious = x
    yprevious = y
}
if instance_exists(oNewCamera)
{
    if oNewCamera.freeCam
        exit
}
if (scrButtonCheckPressed(global.masButton) &amp;&amp; (global.pmState == 0))
    scrPlayerEquipMaster()
else if (scrButtonCheckPressed(global.skipButton) &amp;&amp; ((!frozen) &amp;&amp; (global.pmState == 0)))
    scrComplexSwitch()
else if (scrButtonCheckPressed(global.camButton) &amp;&amp; (global.pmState == 0))
{
}
else if (scrButtonCheckPressed(global.shootButton) &amp;&amp; (global.pmState == 0))
{
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!other.solid)
    exit
if (!place_free((x + hspeed), y))
{
    if (global.grav == 1)
    {
        if (hspeed &lt;= 0)
            move_contact_solid(180, abs(hspeed))
        if (hspeed &gt; 0)
            move_contact_solid(0, abs(hspeed))
    }
    else
    {
        if (hspeed &lt; 0)
            move_contact_solid(180, abs(hspeed))
        if (hspeed &gt;= 0)
            move_contact_solid(0, abs(hspeed))
    }
    hspeed = 0
}
if (!place_free(x, (y + vspeed)))
{
    if (global.grav == 1)
    {
        if (vspeed &lt;= 0)
            move_contact_solid(90, abs(vspeed))
        if (vspeed &gt; 0)
        {
            move_contact_solid(270, abs(vspeed))
            djump = 1
        }
    }
    else
    {
        if (vspeed &lt;= 0)
        {
            move_contact_solid(90, abs(vspeed))
            djump = 1
        }
        if (vspeed &gt; 0)
            move_contact_solid(270, abs(vspeed))
    }
    vspeed = 0
}
if (!place_free((x + hspeed), (y + vspeed)))
    hspeed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.grav == 1)
{
    if ((y - (vspeed / 2)) &lt;= other.y)
    {
        if (other.vspeed &gt;= 0)
        {
            y = (other.y - 9)
            vspeed = other.vspeed
        }
        onPlatform = 1
        djump = 1
    }
}
else if ((y - (vspeed / 2)) &gt;= ((other.y + other.sprite_height) - 1))
{
    if (other.yspeed &lt;= 0)
    {
        y = ((other.y + other.sprite_height) + 8)
        vspeed = other.yspeed
    }
    onPlatform = 1
    djump = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_free((x + hspeed), y))
{
    if (global.grav == 1)
    {
        if (hspeed &lt;= 0)
            move_contact_solid(180, abs(hspeed))
        if (hspeed &gt; 0)
            move_contact_solid(0, abs(hspeed))
    }
    else
    {
        if (hspeed &lt; 0)
            move_contact_solid(180, abs(hspeed))
        if (hspeed &gt;= 0)
            move_contact_solid(0, abs(hspeed))
    }
    hspeed = 0
}
if (!place_free(x, (y + vspeed)))
{
    if (global.grav == 1)
    {
        if (vspeed &lt;= 0)
            move_contact_solid(90, abs(vspeed))
        if (vspeed &gt; 0)
        {
            move_contact_solid(270, abs(vspeed))
            djump = 1
        }
    }
    else
    {
        if (vspeed &lt;= 0)
        {
            move_contact_solid(90, abs(vspeed))
            djump = 1
        }
        if (vspeed &gt; 0)
            move_contact_solid(270, abs(vspeed))
    }
    vspeed = 0
}
if (!place_free((x + hspeed), (y + vspeed)))
    hspeed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var iPart;
for (iPart = 0; iPart &lt; 40; iPart += 1)
{
    p = instance_create((x + random_range(-8, 8)), (y + random_range(-8, 8)), oKeyPart)
    p.direction = (iPart * 222.48)
    p.image_blend = make_color_hsv(((iPart * 255) / 40), 180, 255)
}
for (iPart = 0; iPart &lt; 30; iPart += 1)
{
    p = instance_create((x + random_range(-8, 8)), (y + random_range(-8, 8)), oKeyPart)
    p.direction = (iPart * 222.48)
    p.speed *= 0.5
    p.image_blend = make_color_hsv(((iPart * 255) / 40), 255, 230)
}
scrPlaySoundExt(sndAwaken, 1, 1, false)
scrPlaySoundExt(sndPop, 1, 1, false)
wAni = instance_create(x, y, oPlayerWarpFadeError)
wAni.sprite_index = sprite_index
wAni.image_index = image_index
wAni.image_xscale = xScale
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wAni = instance_create(x, y, oPlayerWarpFade)
wAni.sprite_index = sprite_index
wAni.image_index = image_index
wAni.image_xscale = xScale
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var iPart;
scrPlaySoundExt(sndMasterUnequip, 1, 0.6, false)
scrPlaySoundExt(sndSignflip, 0.7, 0.6, false)
for (iPart = 0; iPart &lt; 40; iPart += 1)
{
    p = instance_create((x + random_range(-8, 8)), (y + random_range(-8, 8)), oKeyPart)
    p.direction = (iPart * 222.48)
    p.image_blend = make_color_hsv(0, 0, 160)
}
for (iPart = 0; iPart &lt; 30; iPart += 1)
{
    p = instance_create((x + random_range(-8, 8)), (y + random_range(-8, 8)), oKeyPart)
    p.direction = (iPart * 222.48)
    p.speed *= 0.5
    p.image_blend = make_color_hsv(0, 0, 90)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.key[4] &gt;= 1)
    aura[0] = 1
else
    aura[0] = 0
if (global.key[5] &gt;= 5)
    aura[1] = 1
else
    aura[1] = 0
if (global.key[6] &gt;= 3)
    aura[2] = 1
else
    aura[2] = 0
if (global.key[10] &gt;= 1)
    brownMode = 1
else if (global.key[10] &lt;= -1)
    brownMode = -1
else
    brownMode = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var drawX, drawY;
drawX = x
drawY = y
if (global.grav == -1)
    drawY += 1
if (brownMode == 1)
{
    draw_set_blend_mode(3)
    brownAngle = ((brownAngle + 2.5) % 360)
    draw_sprite_ext(sprBrownAura, 0, x, y, brownScale, brownScale, (-brownAngle), c_white, 0)
    draw_set_blend_mode(0)
}
else if (brownMode == -1)
{
    draw_set_blend_mode(1)
    brownAngle = ((brownAngle + 2.5) % 360)
    draw_sprite_ext(sprBrownAura, 0, x, y, brownScale, brownScale, (-brownAngle), c_white, 1)
    draw_set_blend_mode(0)
}
draw_sprite_ext(sprite_index, image_index, drawX, drawY, (image_xscale * xScale), (image_yscale * global.grav), image_angle, image_blend, image_alpha)
if global.debugShowHitbox
    draw_sprite_ext(mask_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, (image_alpha * 0.8))
if aura[0]
    draw_sprite_ext(sprAura, 0, x, y, 1, 1, 0, c_white, 0.5)
if aura[1]
    draw_sprite_ext(sprAura, 1, x, y, 1, 1, 0, c_white, 0.5)
if aura[2]
    draw_sprite_ext(sprAura, 2, x, y, 1, 1, 0, c_white, 0.5)
if (masterMode &gt;= 1)
{
    draw_set_blend_mode(1)
    masterDrawAngle = ((masterDrawAngle + 4) % 360)
    masterDrawScale = (0.8 + (0.2 * sin(degtorad(masterDrawAngle))))
    draw_sprite_ext(sprPlayerShine, 0, x, y, masterDrawScale, masterDrawScale, 0, make_color_rgb(180, 180, 50), 1)
    draw_set_blend_mode(0)
    draw_sprite_ext(sprKMaster, 0, (x - 16), (y - 16), 1, 1, 0, c_white, (masterDrawScale * 0.6))
}
if (masterMode &lt;= -1)
{
    draw_set_blend_mode(1)
    masterDrawAngle = ((masterDrawAngle + 4) % 360)
    masterDrawScale = (0.8 + (0.2 * sin(degtorad(masterDrawAngle))))
    draw_sprite_ext(sprPlayerShine, 0, x, y, masterDrawScale, masterDrawScale, 0, make_color_rgb(50, 50, 180), 1)
    draw_set_blend_mode(0)
    draw_sprite_ext(sprKMasterAnti, 0, (x - 16), (y - 16), 1, 1, 0, c_white, (masterDrawScale * 0.6))
}
if global.complexMode
{
    draw_set_font(fTalk)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_color(c_black)
    draw_text((x - 1), (y - 24), "I-View")
    draw_text((x + 1), (y - 24), "I-View")
    draw_text(x, (y - 23), "I-View")
    draw_text(x, (y - 25), "I-View")
    draw_set_color(global.doorCol1)
    draw_text(x, (y - 24), "I-View")
    draw_set_color(c_white)
}
if drawIm
{
    draw_set_blend_mode(1)
    imAngle = min((imAngle + 5), 90)
    imSin = sin(degtorad(imAngle))
    imCos = cos(degtorad(imAngle))
    draw_sprite_ext(sprWhiteAura, 0, x, y, imSin, imSin, 0, c_white, imCos)
    if (imAngle == 90)
    {
        imAngle = 0
        drawIm = 0
    }
    draw_set_blend_mode(0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

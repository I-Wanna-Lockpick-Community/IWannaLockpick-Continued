<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000005</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//General background elements, like gradient and mist.

background_visible[1] = true;
background_index[1] = bGradient;
background_blend[1] = make_color_rgb(60,100,70);

background_index[2] = bMist;
background_blend[2] = make_color_rgb(180,220,190);
background_y[2] = 224;
background_xscale[2] = .75;
background_yscale[2] = .75;
background_hspeed[2] = -.5;
background_alpha[2] = .15;

background_index[3] = bMist;
background_blend[3] = make_color_rgb(180,220,190);
background_y[3] = 300;
background_xscale[3] = .875;
background_yscale[3] = .875;
background_hspeed[3] = -.75;
background_alpha[3] = .15;

background_index[4] = bMistOcean;
background_blend[4] = make_color_rgb(180,220,190);
background_y[4] = 300;
background_hspeed[4] = -1;
background_vtiled[4] = false;
background_alpha[4] = 0.8;

//Generates a list of 3 colors for the background to use.
colorList = ds_list_create();
ds_list_add(colorList,make_color_rgb(255,0,0));
ds_list_add(colorList,make_color_rgb(255,255,0));
ds_list_add(colorList,make_color_rgb(0,255,0));
ds_list_add(colorList,make_color_rgb(0,255,255));
ds_list_add(colorList,make_color_rgb(0,0,255));
ds_list_add(colorList,make_color_rgb(255,0,255));

//Unique room-based seed
var sOld, sNew;
sOld = random_get_seed();
sNew = room;
random_set_seed(sNew);
//Roll 3 flower colors
ds_list_shuffle(colorList);
color1 = ds_list_find_value(colorList,0);
color2 = ds_list_find_value(colorList,1);
color3 = ds_list_find_value(colorList,2);
//Add background flowers
for(i=0;i&lt;=17;i+=1){
    with instance_create(800/16*i+random_range(-24,24),256+random_range(-16,16),oW6FlowerBG){
        color = other.color1;
        layer = 2;
        size = 1;
        petals = irandom_range(7,10);
        boundary = 800/16;
        hspeed = -.15;
    }
}
for(i=0;i&lt;=13;i+=1){
    with instance_create(800/12*i+random_range(-18,18),350+random_range(-32,32),oW6FlowerBG){
        color = other.color2;
        layer = 1;
        size = 1.2;
        petals = irandom_range(9,12);
        boundary = 800/12;
        hspeed = -.3;
        spd = .2;
    }
}
for(i=0;i&lt;=9;i+=1){
    with instance_create(800/8*i+random_range(-12,12),460+random_range(-48,48),oW6FlowerBG){
        color = other.color3;
        layer = 0;
        size = 1.4;
        petals = irandom_range(12,14);
        boundary = 800/8;
        hspeed = -.5;
        spd = .3;
    }
}
random_set_seed(sOld);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(colorList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(colorList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fog + BG Flowers
draw_set_blend_mode(bm_add);
scrDrawBGElement(1);
with oW6FlowerBG{
    if layer == 2{
        for(var i=0; i&lt;petals; i+=1){
            draw_sprite_ext(sprFlowerPetalSmall,0,x,y,size,size,angle+360/petals*i,color,.125);
            /*if x &lt; 0{
                draw_sprite_ext(sprFlowerPetalSmall,0,x+800,y,size,size,angle+360/petals*i,color,.125);
            }*/
        }
    }
}

scrDrawBGElement(2);
with oW6FlowerBG{
    if layer == 1{
        for(var i=0; i&lt;petals; i+=1){
            draw_sprite_ext(sprFlowerPetalSmall,1,x,y,size,size,angle+360/petals*i,color,.25);
            /*if x &lt; 0{
                draw_sprite_ext(sprFlowerPetalSmall,1,x+800,y,size,size,angle+360/petals*i,color,.25);
            }*/
        }
    }
}

scrDrawBGElement(3);
with oW6FlowerBG{
    if layer == 0{
        for(var i=0; i&lt;petals; i+=1){
            draw_sprite_ext(sprFlowerPetalSmall,2,x,y,size,size,angle+360/petals*i,color,.375);
            /*if x &lt; 0{
                draw_sprite_ext(sprFlowerPetalSmall,2,x+800,y,size,size,angle+360/petals*i,color,.375);
            }*/
        }
    }
}
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

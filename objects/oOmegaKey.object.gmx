<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKeyOrd</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rayA = 0
waveA = 0
waveS = 0
upA = 0
upAmt = 0
imgA = 90
drawScale = 1
scale = 1
active = 0
color = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveA = ((waveA + 3) % 360)
waveS = sin(degtorad(waveA))
if active
{
    upA = min((upA + 4), 90)
    upAmt = sin(degtorad(upA))
    image_alpha *= 0.95
    scale = (1 + upAmt)
    if (image_alpha &lt; 0.01)
    {
        box = instance_create(x, y, oItemGet)
        box.itemID = 3
        with (box)
            event_user(0)
        instance_destroy()
    }
    imgA += 12
}
drawScale = sin(degtorad(imgA))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var iPart;
if (active == 0)
{
    active = 1
    global.omegaKey[color] = 1
    global.inCutscene = 1
    with (objPlayer)
        frozen = 1
    scrPlaySoundExt(sndOmegaKey2, 1, 1, false)
    scrPlaySoundExt(sndOmegaKey, 2, 1, false)
    scrSaveGame(0)
    visible = 0
    with (oNewCamera)
        shakeAmt = 4
    for (iPart = 0; iPart &lt; 40; iPart += 1)
    {
        p = instance_create(((x + 16) + random_range(-8, 8)), ((y + 16) + random_range(-8, 8)), oKeyPart)
        p.direction = (iPart * 222.48)
        p.image_blend = make_color_hsv(((iPart * 255) / 40), 180, 255)
    }
    for (iPart = 0; iPart &lt; 30; iPart += 1)
    {
        p = instance_create(((x + 16) + random_range(-8, 8)), ((y + 16) + random_range(-8, 8)), oKeyPart)
        p.direction = (iPart * 222.48)
        p.speed *= 0.5
        p.image_blend = make_color_hsv(((iPart * 255) / 40), 255, 230)
    }
    for (iPart = 0; iPart &lt; 20; iPart += 1)
    {
        p = instance_create(((x + 16) + random_range(-8, 8)), ((y + 16) + random_range(-8, 8)), oKeyPart)
        p.direction = (iPart * 222.48)
        p.image_blend = c_white
        p.speed *= 0.3
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrColorKey()
if (color == 0)
{
    sprite_index = sprKMasterOrd
    image_speed = 0.1
}
if (color == 11)
{
    sprite_index = sprKPureOrd
    image_speed = 0.1
}
if (color == 13)
    sprite_index = sprKStoneOrd
if global.omegaKey[color]
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rayA = ((rayA + 2) % 360)
draw_set_color(c_white)
r = 24
draw_set_blend_mode(1)
x += 16
y += 16
for (i = 0; i &lt; 5; i += 1)
{
    a1 = (rayA + (72 * i))
    a2 = (a1 + 36)
    x1 = (r * sin(degtorad(a1)))
    y1 = (r * cos(degtorad(a1)))
    x2 = (r * sin(degtorad(a2)))
    y2 = (r * cos(degtorad(a2)))
    draw_triangle_color(x, y, (x + x1), (y + y1), (x + x2), (y + y2), merge_color(c_black, c_white, image_alpha), 0, 0, 0)
}
x -= 16
y -= 16
draw_set_blend_mode(0)
switch color
{
    case 0:
    case 11:
    case 13:
        draw_sprite_ext(sprite_index, 0, x, ((y + (3 * waveS)) + upAmt), (drawScale * scale), scale, 0, c_white, image_alpha)
        break
    case 12:
        draw_sprite_ext(sprite_index, 0, x, ((y + (3 * waveS)) + upAmt), (drawScale * scale), scale, 0, c_white, image_alpha)
        shader_set(shdRainbowStripe2)
        draw_sprite_ext(sprite_index, 1, x, ((y + (3 * waveS)) + upAmt), (drawScale * scale), scale, 0, blend, image_alpha)
        shader_reset()
        break
    default:
        draw_sprite_ext(sprite_index, 0, x, ((y + (3 * waveS)) + upAmt), (drawScale * scale), scale, 0, c_white, image_alpha)
        draw_sprite_ext(sprite_index, 1, x, ((y + (3 * waveS)) + upAmt), (drawScale * scale), scale, 0, blend, image_alpha)
        break
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

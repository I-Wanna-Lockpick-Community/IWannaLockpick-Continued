<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(oUndoMain) &gt;= 2{
    instance_destroy();
    exit;
}
validRoom = 0;//Determines whether pushing and popping can happen.
saveBuffered = 0;//If true, prepares to push a game state when the kid is on stable footing.
shouldSave = 0;//Related to the above.
recentPush = 0;//Undoes an extra step back 

undoStack = ds_stack_create();
undoPushIndex = 0;
undoData[0] = 0;
undoPos = 0;//Increments on push, Decrements on pop. Determines if undoing is possible.
//undoPos of 0 means the room has just started, and thus undoing is impossible.

instances[0] = 0;
instancesCount = 0;//For use in for loops for the pop/push loop.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_destroy(undoStack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !validRoom{exit;}
if !instance_exists(objPlayer){exit;}
if global.inCutscene{exit;}

if saveBuffered{
    shouldSave = 0;
    if instance_exists(objPlayer) {
        with oDoorSimple{solid = 0;}
        with oDoorCombo{solid = 0;}
        with objPlayer{//Don't save if near a door or off the ground (important for n-masters)
            if !place_free(x,y+1) &amp;&amp; place_free(x,y){
                other.shouldSave = 1;
                event_user(0) // check key variables
                if instance_exists(oDoorSimple){
                    var dist = distance_to_object(oDoorSimple);
                    if dist &lt;= 1{
                        other.shouldSave = 0;
                    }
                    if dist &lt;= 23 &amp;&amp; (curseMode != 0 || aura[0] == 1 || aura[1] == 1 || aura[2] == 1){
                        other.shouldSave = 0;
                    }
                }
                if instance_exists(oDoorCombo){
                    var dist = distance_to_object(oDoorCombo);
                    if dist &lt;= 1{
                        other.shouldSave = 0;
                    }
                    if dist &lt;= 23 &amp;&amp; (curseMode != 0 || aura[0] == 1 || aura[1] == 1 || aura[2] == 1){
                        other.shouldSave = 0;
                    }
                }
                if instance_exists(oKeyBulk){
                    if place_meeting(x,y,oKeyBulk){
                        other.shouldSave = 0;
                    }
                }
                if instance_exists(oGate){
                    if place_meeting(x,y,oGate){
                        other.shouldSave = 0;
                    }
                }
                if instance_exists(oKina){
                    var dist = distance_to_object(oKina);
                    if dist &lt;= 1{
                        other.shouldSave = 0;
                    }
                    if dist &lt;= 23 &amp;&amp; curseMode != 0{
                        other.shouldSave = 0;
                    }
                }
            }
            if place_meeting(x,y,oSalvageIn){
                other.shouldSave = 0;
            }
        }
        with oDoorSimple{solid = 1;if brownNearPlayer{other.shouldSave = 0;}}
        with oDoorCombo{solid = 1;if brownNearPlayer{other.shouldSave = 0;}}
    }
    if shouldSave {
        //SAVE A GAME STATE TO THE UNDO STACK
        saveBuffered = 0;
        undoPUSH();
    } else {
        show_debug_message("Not stable footing");
    }
}

//Disable undo functionality while the camera is in freecam mode
if instance_exists(oNewCamera){
    if oNewCamera.freeCam == 1{
        exit;
    }
}

if scrButtonCheckPressed(global.shootButton) &amp;&amp; global.pmState == 0 &amp;&amp; undoPos &gt; 1 {
    if saveBuffered{
        // the upcoming save hasnt happened yet, but we want to reverse changes anyway
        show_debug_message("doing a pushpop")
        undoPUSH();
        undoPOP();
        saveBuffered = 0;
    }else{
        undoPOP();
        saveBuffered = 0;
    }
    scrPlaySoundExt(sndSelectBeep,.6,.6,0);
}

with oDoorSimple{
    undoReposition();
}
with oKeyBulk{
    undoReposition();
}
with oDoorCombo{
    undoReposition();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESET STACK AND SAVE FIRST STATE
ds_stack_clear(undoStack);
undoPos = 0;
saveBuffered = 0;
undoCorrection = 0;

global.inCutscene = 0;
global.salvageActive = 0;
global.salvageID = -1;
validRoom = 1;
switch room{
    //Add to this for things like cutscene-only rooms, rooms without the kid, etc.
    case rInit:
    case rTitle:
    case rTitleNew:
    case rMenu:
    case rOptions:
        validRoom = 0;
    break;
}

if validRoom{
    //Create the object instance array
    instancesCount = 0;
    var index = 0;
    //Tell Output Points to make their doors first
    with oSalvageOut{event_user(0);}
    with oSalvageOut{event_user(1);}
    with oSalvageOut{event_user(2);}
    with oSalvageIn{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    //Now tell objects to dump their data into the array
    with oKeyBulk{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    with oDoorSimple{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    with oDoorCombo{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    with oGate{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    with oKina{
        other.instances[index] = id;
        index += 1;
        other.instancesCount += 1;
    }
    //Save the initial room state
    undoPUSH();
}
//NEW: Check for player collisions to initiate the secret
with objPlayer{
    if !place_free(x,y){
        event_user(3);//particles+sounds
        audio_sound_gain(global.currentMusic,0,1000);//music
        global.inCutscene = 1;
        cutObj = instance_create(0,0,oLevelWinInvalid);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_destroy(undoStack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

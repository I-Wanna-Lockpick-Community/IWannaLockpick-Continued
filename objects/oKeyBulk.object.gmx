<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gives you many of a key.
active = 1;//Whether or not it can be collected. Inactive means it goes far out of bounds.
color = 0;
colorGlitch = key_GLITCH;//For glitch keys
count = 1;
icount = 0;
iPow = 0;
type = 0;//0 = Simple, 1 = Absolute, 2 = Ordinal (UNUSED), 3 = Star, 4 = Unstar, 5 = Swap
inf = 0;//Infinite copies!
touched = 0;//whether the thing's been touched (inf copy)
//Scrapped 3 = Absolute+INFINITY, aka what came before the ordinal system

//The main blend of the key.
blend = c_white;
whiteFlash = 0;//White flash when collected with infinite copies

image_speed = 0;
myLight = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroys child object aka lights
if myLight != -1{
    with myLight{
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///post-stuff
visible = active;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>undoReposition();
if touched{
    if !place_meeting(x,y,objPlayer){
        touched = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !active{exit;}
if touched{exit;}
//Slowstopping
scrPlayerDownStop();
undoBUFFER();
if !inf{
    active = 0;
}else{
    touched = 1;
    whiteFlash = 1;
}

if type == 0{//Normal
    addComplexKeys(color,colorCopy,count,icount,0);
}
if type == 1{//Absolute
    if color != key_GLITCH{
        if !isStar(color,colorGlitch){
            global.key[color] = count;
            global.ikey[color] = icount;
        }
    }else{
        if !isStar(color,colorGlitch){
            global.key[colorGlitch] = count;
            global.ikey[colorGlitch] = icount;
        }
    }
}
/*if type == 2{//Scrapped ordinal keys
    if !isStar(color,colorGlitch){
        addComplexKeys(color,colorGlitch,count,0);
    }
}*/
//Normally I'd shift the other numbers back like in KTool, right?
//But I don't wanna go back and change a bunch of key objects' create events...
if type == 3{//Star Key
    if color != key_GLITCH{
        global.star[color] = 1;
    }else{
        global.star[colorGlitch] = 1;
    }
}
if type == 4{//Unstar Key
    if color != key_GLITCH{
        global.star[color] = 0;
    }else{
        global.star[colorGlitch] = 0;
    }
}
if type == 5{//Signflip
    if !isStar(color,colorGlitch){
        if color != key_GLITCH{
            global.key[color] *= -1;
            global.ikey[color] *= -1;
        }else{
            global.key[colorGlitch] *= -1;
            global.ikey[colorGlitch] *= -1;
        }
    }
}
var tmp,tmp2;
if type == 6{//Multiply by i
    if !isStar(color,colorGlitch){
        if color != key_GLITCH{
            tmp = global.key[color];
            tmp2 = global.ikey[color];
            global.key[color] = tmp2*-1;
            global.ikey[color] = tmp;
        }else{
            tmp = global.key[colorGlitch];
            tmp2 = global.ikey[colorGlitch];
            global.key[colorGlitch] = tmp2*-1;
            global.ikey[colorGlitch] = tmp;
        }
    }
}
if type == 7{//Multiply by -i
    if !isStar(color,colorGlitch){
        if color != key_GLITCH{
            tmp = global.key[color];
            tmp2 = global.ikey[color];
            global.key[color] = tmp2;
            global.ikey[color] = tmp*-1;
        }else{
            tmp = global.key[colorGlitch];
            tmp2 = global.ikey[colorGlitch];
            global.key[colorGlitch] = tmp2;
            global.ikey[colorGlitch] = tmp*-1;
        }
    }
}
/*if type == 6{//Positive
    if !isStar(color,colorGlitch){
        if color != key_GLITCH{
            global.key[color] = abs(global.key[color]);
            global.ikey[color] = abs(global.ikey[color]);
        }else{
            global.key[colorGlitch] = abs(global.key[colorGlitch]);
            global.ikey[colorGlitch] = abs(global.ikey[colorGlitch]);
        }
    }
}
if type == 7{//Negative
    if !isStar(color,colorGlitch){
        if color != key_GLITCH{
            global.key[color] = -abs(global.key[color]);
            global.ikey[color] = -abs(global.ikey[color]);
        }else{
            global.key[colorGlitch] = -abs(global.key[colorGlitch]);
            global.ikey[colorGlitch] = -abs(global.ikey[colorGlitch]);
        }
    }
}*/

if !((sign(count)==-1 || sign(icount)==-1) &amp;&amp; sign(count)&lt;=0 &amp;&amp; sign(icount)&lt;=0){
    if color == key_MASTER{
        scrPlaySoundExt(sndMaster,1,1,false);
    } else if color == key_SILVER{
        scrPlaySoundExt(sndMaster,1,1,false);
		// @addcolor if pickup sound
    } else {
		if type == 5 || type == 6 || type == 7{
            scrPlaySoundExt(sndSignflip,1,1,false);
        }else if type == 4{
            scrPlaySoundExt(sndUnstar,1,1,false);
        }else if type == 3{
            scrPlaySoundExt(sndStar,1,1,false);
        }else{
            scrPlaySoundExt(sndKey,1,1,false);
        }
    }
}else{
    if color == key_MASTER {
		scrPlaySoundExt(sndMaster,1,.82,false);
    } else if color == key_SILVER{
        scrPlaySoundExt(sndMaster,1,.82,false);
		// @addcolor if negative pickup sound
    } else {
        scrPlaySoundExt(sndNegative,1,1,false);
    }
}
useMasterCheck();
with other{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if color == key_MASTER{
    if type == 0 || type == 5 || type == 6 || type == 7{sprite_index = sprKMaster;}
    if type == 1{sprite_index = sprKMasterAbs;}
    if type == 2{sprite_index = sprKMasterOrd;}
    if type == 3{sprite_index = sprKMasterStar;}
    if type == 4{sprite_index = sprKMasterStar2;}
    image_speed = .1;
} else if color == key_PURE{
    if type == 0 || type == 5 || type == 6 || type == 7{sprite_index = sprKPure;}
    if type == 1{sprite_index = sprKPureAbs;}
    if type == 2{sprite_index = sprKPureOrd;}
    if type == 3{sprite_index = sprKPureStar;}
    if type == 4{sprite_index = sprKPureStar2;}
    image_speed = .1;
} else if color == key_STONE{
    if type == 0 || type == 5 || type == 6 || type == 7{sprite_index = sprKStone;}
    if type == 1{sprite_index = sprKStoneAbs;}
    if type == 2{sprite_index = sprKStoneOrd;}
    if type == 3{sprite_index = sprKStoneStar;}
    if type == 4{sprite_index = sprKStoneStar2;}
} else if color == key_SILVER{
    if type == 0 || type == 5 || type == 6 || type == 7{sprite_index = sprKSilver;}
    if type == 1{sprite_index = sprKSilver;}
    if type == 2{sprite_index = sprKSilver;}
    if type == 3{sprite_index = sprKSilver;}
    if type == 4{sprite_index = sprKSilver;}
	// @addcolor if key image/animation
} else {
	if type == 0 || type == 5 || type == 6 || type == 7{sprite_index = sprKey;}
	if type == 1{sprite_index = sprKeyAbs;}
	if type == 2{sprite_index = sprKeyOrd;}
	if type == 3{sprite_index = sprKeyStar;}
	if type == 4{sprite_index = sprKeyStar2;}
}
scrColorKey();

myLight = -1;
if instance_exists(oLightsW5) || instance_exists(oLightsW4) || instance_exists(oBGW7) || instance_exists(oLightsW9) || instance_exists(oBGW12){
    myLight = instance_create(x+16,y+16,oLight);
    myLight.parent = id;
    myLight.image_xscale = .2;
    myLight.image_yscale = .2;
    myLight.image_blend = merge_color(blend,c_white,.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if color == key_MASTER || color == key_PURE || color == key_STONE || color == key_SILVER { // @addcolor if key image/animation
    image_speed = .1;
    draw_sprite_ext(sprite_index,floor(image_index),x,y,1,1,0,c_white,1);
} else if color == key_GLITCH {
	shader_set(shdRainbowStripe2);
	draw_sprite_ext(sprite_index,3,x,y,1,1,0,c_white,1);
	draw_sprite_ext(sprite_index,1,x,y,1,1,0,blend,1);
	shader_reset();
	if colorGlitch != key_GLITCH{
		scrDrawKeyGlitch();
	}
	// @addcolor if key shader
} else {
	draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,1);
	draw_sprite_ext(sprite_index,1,x,y,1,1,0,blend,1);
}

//White flashing key (NEW: Flashes when picked up with INF property)
drawKeyFlash();

//Text/symbol
draw_set_font(fKeyBulk);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
if !((sign(count)==-1 || sign(icount)==-1) &amp;&amp; sign(count)&lt;=0 &amp;&amp; sign(icount)&lt;=0){
    outCol = make_color_rgb(54,48,41);
    inCol = make_color_rgb(235,227,221);
}else{
    outCol = make_color_rgb(214,207,201);
    inCol = make_color_rgb(54,48,41);
}
if (type != 5 &amp;&amp; type != 6 &amp;&amp; type != 7) &amp;&amp; !(count == 1 &amp;&amp; icount == 0){
    draw_set_color(outCol);
    if icount == 0{//Real numbers
        s = string(count);
    }else{//Complex numbers
        if count == 0{//Imaginary numbers
            s = string(icount)+"i";
        }else if icount &gt; 0{
            s = string(count)+"+"+string(icount)+"i";
        }else{
            s = string(count)+string(icount)+"i";//Negatives have a - in the string
        }
    }
    draw_text(x-1,y+34,s);
    draw_text(x,y+33,s);
    draw_text(x+3,y+34,s);
    draw_text(x+2,y+33,s);
    draw_text(x-1,y+36,s);
    draw_text(x,y+37,s);
    draw_text(x+3,y+36,s);
    draw_text(x+2,y+37,s);
    /*
    //ortho offset
    draw_text(x-1,y+36,s);
    draw_text(x+1,y+36,s);
    draw_text(x-1,y+38,s);
    draw_text(x+1,y+38,s);
    //xy offset
    draw_text(x,y+36,s);
    draw_text(x,y+38,s);
    draw_text(x-1,y+37,s);
    draw_text(x+1,y+37,s);
    */
    draw_set_color(inCol);
    //draw_text(x,y+37,s);
    draw_text(x+1,y+35,s);
}else if type == 5{
    draw_sprite(sprKSwap,0,x,y);
}else if type == 6{
    draw_sprite(sprKSwap,1,x,y);
}else if type == 7{
    draw_sprite(sprKSwap,2,x,y);
}
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

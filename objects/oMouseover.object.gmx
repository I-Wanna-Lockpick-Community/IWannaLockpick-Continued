<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, _ix, _iy;
if (instance_number(oMouseover) &gt;= 2)
{
    instance_destroy()
    exit
}
mouseID = -1
mouseType = 0
getCol = 0
getSpend = 0
getCost = 0
getICost = 0
getType = 0
getCopy = 0
getAura[0] = 0
getAura[1] = 0
getAura[2] = 0
getAura[3] = 0
getSal = -1
getStuck = 0
lockCount = 0
lockCol[0] = 0
lockType[0] = 0
lockCost[0] = 0
lockICost[0] = 0
colName[0] = "Master"
colName[1] = "White"
colName[2] = "Orange"
colName[3] = "Purple"
colName[4] = "Red"
colName[5] = "Green"
colName[6] = "Blue"
colName[7] = "Pink"
colName[8] = "Cyan"
colName[9] = "Black"
colName[10] = "Brown"
colName[11] = "Pure"
colName[12] = "Glitch"
colName[13] = "Stone"
keyName[0] = ""
keyName[1] = "Exact "
keyName[2] = "Ordinal "
keyName[3] = "Star "
keyName[4] = "Unstar "
keyName[5] = "Signflip "
keyName[6] = "Rotor (i) "
keyName[7] = "Rotor (-i) "
doorName[0] = ""
doorName[1] = "Blank "
doorName[2] = "Blast "
doorName[3] = "All "
pdaMode = 0
oldMode = 0
pdaID[0] = 1
pdaID[1] = 2
pdaID[2] = 3
pdaID[3] = 7
pdaID[4] = 8
pdaID[5] = 9
pdaID[6] = 13
pdaID[7] = 0
pdaID[8] = 11
pdaID[9] = 10
pdaID[10] = 4
pdaID[11] = 5
pdaID[12] = 6
pdaID[13] = 12
numJokes = 15
curJoke = irandom(numJokes)
joke[0] = "Why was 6 afraid of 7? Because 7 mod 2 = 1, and that usually means the puzzle is gonna have Blank Doors."
joke[1] = "A key a day keeps the doors away! Specifically, bipedal doors which don't want to be opened."
joke[2] = "P.D.A., in this case, stands for 'Personal Digital Assistant.' Do not be led astray into thinking it stands for 'Personal Dersonal Arsenal.'"
joke[3] = "Remember to keep your eyes on the invariants! If you don't, then mathematicians can't write a paper about the puzzles you're solving!"
joke[4] = "This PDA serves two functions: Keeping your key counts within an arm's distance, and pestering you with lukewarm comedy. We hope you enjoy it!"
joke[5] = "The PDA was made as a collaborative effort between Kina, the God of Keys, and Spindles, the God of Precision. Be sure to give them your regards."
joke[6] = "Do not enter hub doors if you are sensitive to constant spatial confusion, or your hippocampus has been replaced with wood."
joke[7] = "99 Green Rotor Keys on the wall, 99 Green Rotor Keys; Take one down, pass it around, 99i Green Rotor Keys on the wall!"
joke[8] = "The heating effects of Red Keys are for use in these puzzles only. Do not take one home and use it as a heating pad."
joke[9] = "Imaginary Keys are not, in fact, a figment of your imagination. The proverbial 'Key to the Puzzle', though, *is* an abstraction, and any indication otherwise should be ignored."
joke[10] = "Unfortunately, Skeleton Keys will not be encountered on your journey, as we could not source the necessary skeleton parts. At least, not legally."
joke[11] = "If you wait long enough at Mooncloud Lake, the time of day will change. You might not have known that if you solve puzzles about as fast as a bomb decimates the sound barrier."
joke[12] = "Because of their special time properties, you can't bring any keys or doors outside this place. You'll have to settle for a replica, if you can even find one."
joke[13] = "The reason Combo Doors make the sound of a camera shutter is because they want to remember the occasion. Who wouldn't?"
joke[14] = "In the grand scheme of things, carrying around 50,000 keys is a rather trivial task. It's only five digits you have to worry about!"
goldIndex = 0
warpMode = 0
warpVarReset()
mouseState = 0
oldMX = mouse_x
oldMY = mouse_y
markX = 0
markY = 0
mouseDragged = 0
markStr = ""
markIsNew = 0
tmpType = 0
tmpSymbol = 0
tmpNum = 0
tmpStr = ""
tmpCol = 0
pmGuiX = 0
pmGuiY = 0
pmGuiW = 0
pmGuiH = 0
pmButtons = 0
mousePMBID = -1
defMarkButton(0, 1, 16, 4, 64, 24, 308, 0, make_color_rgb(50, 255, 50), make_color_rgb(0, 180, 0))
defMarkButton(1, 1, 96, 4, 64, 24, 308, 1, make_color_rgb(255, 200, 50), make_color_rgb(180, 150, 0))
defMarkButton(2, 1, 176, 4, 64, 24, 308, 2, make_color_rgb(255, 50, 50), make_color_rgb(180, 0, 0))
defMarkButton(3, 1, 4, 36, 24, 24, 307, 0, 16777215, make_color_rgb(200, 255, 200))
for (i = 0; i &lt; 6; i += 1)
    defMarkButton((4 + i), 1, (36 + (36 * i)), 36, 24, 24, 305, i, 16777215, make_color_rgb(200, 255, 200))
defMarkButton(10, 1, 4, 68, 24, 24, 307, 1, 16777215, make_color_rgb(200, 255, 200))
defMarkButton(11, 1, 36, 68, 24, 24, 307, 5, 16777215, 12632256)
defMarkButton(12, 1, 72, 68, 24, 24, 307, 6, 16777215, 12632256)
defMarkButton(13, 1, 184, 68, 24, 24, 307, 7, 16777215, 12632256)
defMarkButton(14, 1, 220, 68, 24, 24, 307, 8, 16777215, 12632256)
defMarkButton(15, 1, 4, 100, 24, 24, 307, 2, 16777215, make_color_rgb(200, 255, 200))
defMarkButton(16, 1, 36, 100, 24, 24, 307, 3, 16777215, 12632256)
defMarkButton(17, 1, 72, 100, 24, 24, 307, 4, 16777215, 12632256)
defMarkButton(18, 2, 32, 8, 64, 28, 308, 0, make_color_rgb(50, 255, 50), make_color_rgb(0, 180, 0))
defMarkButton(19, 2, 304, 8, 64, 28, 308, 1, make_color_rgb(255, 200, 50), make_color_rgb(180, 150, 0))
for (i = 0; i &lt; 18; i += 1)
{
    _ix = (118 + (20 * ((i % 9) - 4)))
    _iy = (140 + (20 * (i div 9)))
    defMarkButton((20 + i), 1, _ix, _iy, 16, 16, -1, -1, 16777215, 16777215)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nonsenseCheck, check2;
if mouse_in_window()
{
    mouseID = -1
    with (oDoorSimple)
    {
        if ((mouse_x &gt;= x) &amp;&amp; ((mouse_x &lt;= ((x + (32 * w)) - 1)) &amp;&amp; ((mouse_y &gt;= y) &amp;&amp; (mouse_y &lt;= ((y + (32 * h)) - 1)))))
        {
            other.mouseID = id
            other.mouseType = 1
            other.getCol = color
            other.getSpend = colorSpend
            other.getCost = count
            other.getICost = icount
            other.getType = type
            other.getCopy = colorCopy
            other.getAura[0] = aura[0]
            other.getAura[1] = aura[1]
            other.getAura[2] = aura[2]
            other.getAura[3] = browned
            other.getSal = salvageID
        }
    }
    with (oDoorCombo)
    {
        if ((mouse_x &gt;= x) &amp;&amp; ((mouse_x &lt;= ((x + (32 * w)) - 1)) &amp;&amp; ((mouse_y &gt;= y) &amp;&amp; (mouse_y &lt;= ((y + (32 * h)) - 1)))))
        {
            other.mouseID = id
            other.mouseType = 2
            other.getSpend = colorSpend
            other.lockCount = lockCount
            other.getCopy = colorCopy
            other.getAura[0] = aura[0]
            other.getAura[1] = aura[1]
            other.getAura[2] = aura[2]
            other.getAura[3] = browned
            other.getSal = salvageID
            for (i = 0; i &lt; lockCount; i += 1)
            {
                other.lockCol[i] = lock[i, 0]
                other.lockCost[i] = lock[i, 1]
                other.lockICost[i] = lock[i, 2]
                other.lockType[i] = lock[i, 3]
            }
        }
    }
    with (oKeyBulk)
    {
        if ((mouse_x &gt;= x) &amp;&amp; ((mouse_x &lt;= ((x + (32 * image_xscale)) - 1)) &amp;&amp; ((mouse_y &gt;= y) &amp;&amp; (mouse_y &lt;= ((y + (32 * image_yscale)) - 1)))))
        {
            other.mouseID = id
            other.mouseType = 0
            other.getCol = color
            other.getCost = count
            other.getICost = icount
            other.getType = type
            other.getCopy = colorCopy
        }
    }
    with (oSalvageIn)
    {
        if ((mouse_x &gt;= (x - 16)) &amp;&amp; ((mouse_x &lt;= (x + 16)) &amp;&amp; ((mouse_y &gt;= (y - 32)) &amp;&amp; (mouse_y &lt;= y))))
        {
            other.mouseID = id
            other.mouseType = 3
            other.getSal = ID
        }
    }
    with (oSalvageOut)
    {
        if ((mouse_x &gt;= (x - 16)) &amp;&amp; ((mouse_x &lt;= (x + 16)) &amp;&amp; ((mouse_y &gt;= (y - 32)) &amp;&amp; (mouse_y &lt;= y))))
        {
            other.mouseID = id
            other.mouseType = 4
            other.getSal = ID
            other.getStuck = noRoom
        }
    }
    with (oGate)
    {
        if ((mouse_x &gt;= x) &amp;&amp; ((mouse_x &lt;= ((x + (32 * w)) - 1)) &amp;&amp; ((mouse_y &gt;= y) &amp;&amp; (mouse_y &lt;= ((y + (32 * h)) - 1)))))
        {
            other.mouseID = id
            other.mouseType = 5
            other.lockCount = lockCount
            other.getCopy = colorCopy
            for (i = 0; i &lt; lockCount; i += 1)
            {
                other.lockCol[i] = lock[i, 0]
                other.lockCost[i] = lock[i, 1]
                other.lockICost[i] = lock[i, 2]
                other.lockType[i] = lock[i, 3]
            }
        }
    }
    with (oKina)
    {
        if active
        {
            if (point_distance(x, y, mouse_x, mouse_y) &lt; 16)
            {
                other.mouseID = id
                other.mouseType = 6
                other.getAura[3] = browned
            }
        }
    }
}
else
    mouseID = -1
if ((!warpMode) &amp;&amp; (!pdaMode))
{
    switch global.pmState
    {
        case 0:
            mousePMBID = -1
            if (mouseState == 0)
                global.curPM = getMouseMark()
            markIsNew = 0
            if (global.canMark &amp;&amp; (!global.inCutscene))
            {
            }
            break
        case 1:
            mousePMBID = getMouseMarkButton()
            if (global.canMark &amp;&amp; (!global.inCutscene))
            {
            }
            else
            {
                if (markIsNew &amp;&amp; (global.curPM != -1))
                    scrRemoveMark(global.curPM)
                global.curPM = -1
                global.pmState = 0
            }
            break
        case 2:
            mousePMBID = getMouseMarkButton()
            if keyboard_check_pressed(vk_escape)
                keyboard_string = ""
            if (global.canMark &amp;&amp; (!global.inCutscene))
            {
            }
            else
            {
                if (markIsNew &amp;&amp; (global.curPM != -1))
                    scrRemoveMark(global.curPM)
                global.curPM = -1
                global.pmState = 0
                keyboard_string = ""
            }
            break
    }
    
    switch mouseState
    {
        case -1:
            mouseState = 0
            break
        case 0:
            mouseDragged = 0
            if (mouse_check_button_pressed(1) &amp;&amp; mouse_in_window())
            {
                mouseState = 1
                if (global.canMark &amp;&amp; ((!global.inCutscene) &amp;&amp; (global.pmState == 0)))
                {
                    if (global.curPM == -1)
                    {
                        global.curPM = getFirstFreeMark()
                        if (global.curPM != -1)
                        {
                            global.pmVis[global.curPM] = 1
                            global.pmX[global.curPM] = clamp(mouse_x, view_xview[0], (view_xview[0] + view_wview[0]))
                            global.pmY[global.curPM] = clamp(mouse_y, view_yview[0], (view_yview[0] + view_hview[0]))
                            global.pmType[global.curPM] = oPencilmark.tmpType
                            global.pmSymbol[global.curPM] = oPencilmark.tmpSymbol
                            global.pmNum[global.curPM] = oPencilmark.tmpNum
                            global.pmStr[global.curPM] = oPencilmark.tmpStr
                            global.pmCol[global.curPM] = oPencilmark.tmpCol
                            global.pmState = 1
                            markIsNew = 1
                            tmpType = oPencilmark.tmpType
                            tmpSymbol = oPencilmark.tmpSymbol
                            tmpNum = oPencilmark.tmpNum
                            tmpStr = oPencilmark.tmpStr
                            tmpCol = oPencilmark.tmpCol
                            scrPlaySoundExt(sndAddMark, 0.7, 1, false)
                        }
                    }
                }
                else if (global.canMark &amp;&amp; ((!global.inCutscene) &amp;&amp; (global.pmState != 0)))
                {
                    if (mousePMBID != -1)
                    {
                        markButtonAction(mousePMBID)
                        mouseState = -1
                    }
                }
            }
            break
        case 1:
            if (mouse_check_button(1) &amp;&amp; mouse_in_window())
            {
                if ((oldMX != mouse_x) || (oldMY != mouse_y))
                {
                    if (global.canMark &amp;&amp; ((!global.inCutscene) &amp;&amp; (global.pmState == 0)))
                    {
                        if (global.curPM != -1)
                        {
                            global.pmX[global.curPM] = clamp(mouse_x, view_xview[0], (view_xview[0] + view_wview[0]))
                            global.pmY[global.curPM] = clamp(mouse_y, view_yview[0], (view_yview[0] + view_hview[0]))
                            scrSavePencilmark(room)
                        }
                    }
                    mouseDragged = 1
                }
            }
            else
            {
                mouseState = 0
                if (mouseDragged == 0)
                {
                    if (global.canMark &amp;&amp; ((!global.inCutscene) &amp;&amp; (global.pmState == 0)))
                    {
                        if (global.curPM != -1)
                        {
                            global.pmState = 1
                            oPencilmark.tmpType = global.pmType[global.curPM]
                            oPencilmark.tmpSymbol = global.pmSymbol[global.curPM]
                            oPencilmark.tmpNum = global.pmNum[global.curPM]
                            oPencilmark.tmpStr = global.pmStr[global.curPM]
                            oPencilmark.tmpCol = global.pmCol[global.curPM]
                            markIsNew = 0
                            tmpType = oPencilmark.tmpType
                            tmpSymbol = oPencilmark.tmpSymbol
                            tmpNum = oPencilmark.tmpNum
                            tmpStr = global.pmStr[global.curPM]
                            tmpCol = oPencilmark.tmpCol
                        }
                    }
                }
            }
            break
    }
    
    if ((!mouse_check_button(1)) &amp;&amp; mouse_check_button_pressed(2))
    {
        if ((!mouseDragged) &amp;&amp; ((global.pmState == 0) &amp;&amp; (global.canMark &amp;&amp; (!global.inCutscene))))
        {
            if (global.curPM != -1)
            {
                scrRemoveMark(global.curPM)
                scrSavePencilmark(room)
                global.curPM = -1
                scrPlaySoundExt(sndCamera, 0.55, 1.5, false)
            }
        }
        else if (global.pmState == 1)
        {
            if markIsNew
                scrRemoveMark(global.curPM)
            global.curPM = -1
            global.pmState = 0
        }
    }
    oldMX = mouse_x
    oldMY = mouse_y
    if (global.curPM != -1)
    {
        markX = global.pmX[global.curPM]
        markY = global.pmY[global.curPM]
    }
}
draw_set_font(fMouseover)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
pmGuiW = 256
pmGuiH = 192
if (global.pmState == 2)
{
    pmGuiW = 400
    pmGuiH = max(112, (string_height(keyboard_string) + 96))
}
pmGuiX = (round((((markX - view_xview[0]) * 800) / view_wview[0])) - (pmGuiW / 2))
pmGuiY = (round((((markY - view_yview[0]) * 608) / view_hview[0])) - (pmGuiH / 2))
pmGuiX = clamp(pmGuiX, 0, max((800 - pmGuiW), (400 - (pmGuiW / 2))))
pmGuiY = clamp(pmGuiY, 0, max((608 - pmGuiH), 0))
if ((!warpMode) &amp;&amp; (global.pmState == 0))
{
    if global.inCutscene
    {
        if (pdaMode == 1)
        {
            pdaMode = 0
            scrPlaySoundExt(sndDrop, 0.7, 1, false)
        }
        exit
    }
    if (!instance_exists(objPlayer))
    {
        if (pdaMode == 1)
        {
            pdaMode = 0
            scrPlaySoundExt(sndDrop, 0.7, 1, false)
        }
        exit
    }
    if (global.object[1] || global.allUnlock)
    {
        if ((pdaMode == 1) &amp;&amp; scrButtonCheckReleased(global.specialButton))
            scrPlaySoundExt(sndDrop, 0.7, 1, false)
        pdaMode = 0
        if scrButtonCheck(global.specialButton)
        {
            if ((!global.inCutscene) &amp;&amp; ((!instance_exists(oLevelWin)) &amp;&amp; ((!instance_exists(oLevelWinOmega)) &amp;&amp; ((!instance_exists(oLevelWinInvalid)) &amp;&amp; ((!instance_exists(oLevelWinS)) &amp;&amp; ((!instance_exists(oLevelTransition)) &amp;&amp; (!instance_exists(oWorldTransition))))))))
            {
                pdaMode = 1
                if (oldMode == 0)
                    scrPlaySoundExt(sndDrop, 0.7, 1.5, false)
            }
        }
        oldMode = pdaMode
        goldIndex = ((goldIndex + 0.1) % 4)
    }
}
if (global.object[2] || global.allUnlock)
{
    nonsenseCheck = (instance_exists(objPlayer) &amp;&amp; ((!global.inCutscene) &amp;&amp; ((!instance_exists(oLevelWin)) &amp;&amp; ((!instance_exists(oLevelWinOmega)) &amp;&amp; ((!instance_exists(oLevelWinInvalid)) &amp;&amp; ((!instance_exists(oLevelWinS)) &amp;&amp; ((!instance_exists(oLevelTransition)) &amp;&amp; ((!instance_exists(oWorldTransition)) &amp;&amp; ((!global.inLevel) &amp;&amp; ((global.pmState == 0) &amp;&amp; ((room != rIntro) &amp;&amp; ((room != rIntro2) &amp;&amp; (room != rEnd2)))))))))))))
    check2 = 1
    if instance_exists(oNewCamera)
        check2 = (!oNewCamera.freeCam)
    else
        check2 = 1
    check2 = (check2 &amp;&amp; (!pdaMode))
    if scrButtonCheckPressed(global.warpButton)
    {
        if ((warpMode == 0) &amp;&amp; ((global.object[2] || global.allUnlock) &amp;&amp; (nonsenseCheck &amp;&amp; check2)))
        {
            with (objPlayer)
                frozen = 1
            warpMode = 1
            warpCurX = warpCurXS
            warpCurY = warpCurYS
            warpCurNode = warpNodeS
            scrPlaySoundExt(sndDrop, 0.7, 1.5, false)
        }
        else if ((warpMode == 1) &amp;&amp; nonsenseCheck)
        {
            with (objPlayer)
                frozen = 0
            warpMode = 0
            scrPlaySoundExt(sndDrop, 0.7, 1, false)
        }
    }
    if (warpMode &amp;&amp; ((!nonsenseCheck) || (!check2)))
    {
        warpMode = 0
        scrPlaySoundExt(sndDrop, 0.7, 1, false)
    }
    if warpMode
    {
        if scrButtonCheck(global.rightButton)
            warpCurX = min((warpCurX + 6), 296)
        if scrButtonCheck(global.leftButton)
            warpCurX = max((warpCurX - 6), -296)
        if scrButtonCheck(global.downButton)
            warpCurY = min((warpCurY + 6), 224)
        if scrButtonCheck(global.upButton)
            warpCurY = max((warpCurY - 6), -224)
        warpGetCursorNode()
        if (warpCurNode != -1)
        {
            if (((nodeIndex[warpCurNode] == 0) || (global.allUnlock &amp;&amp; (nodeIndex[warpCurNode] != 1))) &amp;&amp; (nonsenseCheck &amp;&amp; (scrButtonCheckPressed(global.selButton) || scrButtonCheckPressed(global.shootButton))))
            {
                warpMode = 0
                with (objPlayer)
                    event_user(2)
                scrPlaySoundExt(sndAwaken, 0.8, 1.5, false)
                scrPlaySoundExt(sndSelectMade, 1, 0.8, false)
                audio_sound_gain(global.currentMusic, 0, 1000)
                with (oBGW7)
                {
                    if (curSong != -1)
                        audio_sound_gain(curSong, 0, 1000)
                    deleteNext = 1
                }
                global.inLevel = 0
                global.roomOuter = nodeRoom[warpCurNode]
                global.roomNum = -1
                global.outerLevelTele = 0
                t = instance_create(0, 0, oWorldTransition)
                t.roomTo = nodeRoom[warpCurNode]
                t.color = make_color_rgb(200, 50, 255)
                setRoomTransitionColor(nodeRoom[warpCurNode])
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
curJoke = ((curJoke + irandom_range(1, (numJokes - 1))) % numJokes)
warpMode = 0
if ((room != rInit) &amp;&amp; (room != rTitleNew))
{
    warpVarReset()
    warpGetVisible()
}
tmpType = 0
tmpSymbol = 0
tmpNum = 0
tmpStr = ""
tmpCol = 0
for (i = 0; i &lt; 18; i += 1)
{
    scrMarkColor(i)
    pmButCol[(20 + i)] = markCol
    pmButSelCol[(20 + i)] = markCol
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, countString, j, _wustatus, isCopy, boxX, boxY, boxW, boxH, _bx, _by, _bw, _bh, _str, _instr;
if ((!global.inCutscene) &amp;&amp; instance_exists(objPlayer))
{
    if (pdaMode == 1)
    {
        draw_set_alpha(0.5)
        draw_set_color(c_black)
        draw_rectangle(-1, -1, 801, 609, 0)
        draw_set_alpha(1)
        draw_set_color(c_white)
        pdaX = 200
        pdaY = 32
        draw_sprite(sprPDA, 0, pdaX, pdaY)
        for (i = 0; i &lt; 14; i += 1)
        {
            drawX = ((pdaX + 20) + (184 * (i &gt; 6)))
            drawY = ((pdaY + 20) + (48 * (i % 7)))
            draw_set_alpha(1)
            draw_set_color(c_white)
            if ((pdaID[i] != 0) &amp;&amp; ((pdaID[i] != 11) &amp;&amp; ((pdaID[i] != 12) &amp;&amp; (pdaID[i] != 13))))
            {
                color = pdaID[i]
                scrColorKey()
                draw_sprite(sprKey, 0, drawX, drawY)
                draw_sprite_ext(sprKey, 1, drawX, drawY, 1, 1, 0, blend, 1)
            }
            else if (pdaID[i] == 0)
                draw_sprite(sprKMaster, floor(goldIndex), drawX, drawY)
            else if (pdaID[i] == 11)
                draw_sprite(sprKPure, floor(goldIndex), drawX, drawY)
            else if (pdaID[i] == 12)
            {
                color = pdaID[i]
                scrColorKey()
                shader_set(shdRainbowStripe2)
                draw_sprite(sprKey, 3, drawX, drawY)
                draw_sprite_ext(sprKey, 1, drawX, drawY, 1, 1, 0, blend, 1)
                shader_reset()
            }
            else if (pdaID[i] == 13)
                draw_sprite(sprKStone, 0, drawX, drawY)
            if (global.star[pdaID[i]] == 1)
                draw_sprite_ext(sprWorldEntry, 16, drawX, (drawY + 16), 1, 1, 0, c_white, 1)
            draw_set_color(make_color_rgb(0, 255, 0))
            draw_set_font(fPDA)
            draw_set_valign(fa_bottom)
            draw_set_halign(fa_left)
            if (global.key[pdaID[i]] == 0)
            {
                if (global.ikey[pdaID[i]] == 0)
                    countString = "0"
                else
                    countString = (string(global.ikey[pdaID[i]]) + "i")
            }
            else if (global.ikey[pdaID[i]] == 0)
                countString = string(global.key[pdaID[i]])
            else if (global.ikey[pdaID[i]] &gt; 0)
                countString = (((string(global.key[pdaID[i]]) + "+") + string(global.ikey[pdaID[i]])) + "i")
            else
                countString = ((string(global.key[pdaID[i]]) + string(global.ikey[pdaID[i]])) + "i")
            draw_text((drawX + 36), (drawY + 30), ("x" + countString))
            if ((i % 7) != 6)
                draw_line((drawX - 2), (drawY + 40), (drawX + 160), (drawY + 40))
            draw_set_color(c_white)
        }
        draw_set_halign(fa_left)
        draw_set_valign(fa_top)
        draw_set_color(make_color_rgb(0, 255, 0))
        draw_line((pdaX + 20), (pdaY + 348), (pdaX + 364), (pdaY + 348))
        draw_set_font(fPDA2)
        draw_set_color(make_color_rgb(80, 255, 255))
        draw_text_ext((pdaX + 20), (pdaY + 366), ("Door Facts: " + joke[curJoke]), 20, 352)
        draw_set_color(c_white)
    }
}
if ((!global.inCutscene) &amp;&amp; (instance_exists(objPlayer) &amp;&amp; warpMode))
{
    draw_set_alpha(0.5)
    draw_set_color(c_black)
    draw_rectangle(-1, -1, 801, 609, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
    midX = 400
    midY = 304
    draw_sprite(sprWarpRodGui, 0, 400, 304)
    draw_set_alpha(0.35)
    draw_set_color(c_black)
    for (j = 0; j &lt; numPairs; j += 1)
    {
        if (pairVis[j] || global.allUnlock)
            draw_line_width(((midX + nodeX[pairA[j]]) + 1), ((midY + nodeY[pairA[j]]) + 1), ((midX + nodeX[pairB[j]]) + 1), ((midY + nodeY[pairB[j]]) + 1), 2)
    }
    draw_set_alpha(1)
    draw_set_color(c_white)
    for (j = 0; j &lt; numPairs; j += 1)
    {
        if (pairVis[j] || global.allUnlock)
            draw_line_width((midX + nodeX[pairA[j]]), (midY + nodeY[pairA[j]]), (midX + nodeX[pairB[j]]), (midY + nodeY[pairB[j]]), 2)
    }
    draw_set_font(fMiniID)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    for (i = 0; i &lt; numNodes; i += 1)
    {
        if nodeVisible[i]
        {
            _wustatus = nodeIndex[i]
            if (global.allUnlock &amp;&amp; (_wustatus == 2))
                _wustatus = 0
            draw_sprite_ext(sprWarpRodNode, _wustatus, ((midX + nodeX[i]) + 1), ((midY + nodeY[i]) + 1), 1, 1, 0, c_black, 0.35)
            draw_sprite_ext(sprWarpRodNode, _wustatus, (midX + nodeX[i]), (midY + nodeY[i]), 1, 1, 0, c_white, 1)
            if (_wustatus == 0)
                draw_set_color(make_color_rgb(0, 32, 64))
            else if (_wustatus == 1)
                draw_set_color(make_color_rgb(0, 64, 0))
            else if (_wustatus == 2)
            {
                draw_set_color(c_black)
                draw_text((midX + nodeX[i]), (midY + nodeY[i]), "?")
            }
            if (_wustatus != 2)
                draw_text((midX + nodeX[i]), (midY + nodeY[i]), nodeCap[i])
            draw_set_color(c_white)
        }
    }
    if (warpCurNode != -1)
        draw_sprite_ext(sprWarpRodNode, 3, (midX + nodeX[warpCurNode]), (midY + nodeY[warpCurNode]), 1, 1, 0, c_white, 1)
    draw_sprite_ext(sprWarpCursor, 0, ((midX + warpCurX) + 2), ((midY + warpCurY) + 2), 1, 1, 0, c_black, 0.35)
    draw_sprite_ext(sprWarpCursor, 0, (midX + warpCurX), (midY + warpCurY), 1, 1, 0, c_white, 1)
}
if ((pdaMode != 1) &amp;&amp; ((mouseID != -1) &amp;&amp; (instance_exists(objPlayer) &amp;&amp; (global.pmState == 0))))
{
    if (mouseType == 0)
    {
        str = ((keyName[getType] + colName[getCol]) + " Key#")
        if ((getType == 0) || (getType == 1))
        {
            str += "Amount: "
            if ((getCost == 0) &amp;&amp; (getICost != 0))
                str += (string(getICost) + "i")
            else if (getICost == 0)
                str += string(getCost)
            else if (getICost &gt;= 1)
                str += (((string(getCost) + "+") + string(getICost)) + "i")
            else
                str += ((string(getCost) + string(getICost)) + "i")
        }
        if (getCol == 12)
            str += ("#Mimic: " + colName[getCopy])
    }
    else if (mouseType == 1)
    {
        str = ((doorName[getType] + colName[getSpend]) + " Door#Cost: ")
        if (getType == 0)
        {
            if (getICost != 0)
                str += (string(getICost) + "i")
            else
                str += string(getCost)
        }
        else if (getType == 1)
            str += "None"
        else if (getType == 2)
        {
            if (getCost == 1)
                str += "[All +]"
            else if (getCost == -1)
                str += "[All -]"
            else if (getICost == 1)
                str += "[All +i]"
            else
                str += "[All -i]"
        }
        else if (getType == 3)
            str += "[ALL]"
        if (getCol != getSpend)
            str += (" " + colName[getCol])
        if ((getCol == 12) || (getSpend == 12))
            str += ("#Mimic: " + colName[getCopy])
        if (getAura[0] || (getAura[1] || (getAura[2] || getAura[3])))
        {
            str += "#- Effects -"
            if getAura[3]
                str += "#Cursed!"
            if getAura[0]
                str += "#Frozen! (1xRed)"
            if getAura[1]
                str += "#Eroded! (5xGreen)"
            if getAura[2]
                str += "#Painted! (3xBlue)"
        }
        if (getSal != -1)
            str += ("##SID: " + string(getSal))
    }
    else if (mouseType == 2)
    {
        isCopy = (getSpend == 12)
        if (lockCount == 0)
            str = (("Lockless " + colName[getSpend]) + " Door#")
        else
        {
            str = (("Combo " + colName[getSpend]) + " Door#")
            for (i = 0; i &lt; lockCount; i += 1)
            {
                str += ((("Lock: " + doorName[lockType[i]]) + colName[lockCol[i]]) + ", Cost: ")
                if (lockType[i] == 0)
                {
                    if (lockICost[i] != 0)
                        str += (string(lockICost[i]) + "i")
                    else
                        str += string(lockCost[i])
                }
                else if (lockType[i] == 1)
                    str += "None"
                else if (lockType[i] == 2)
                {
                    if (lockCost[i] == 1)
                        str += "[All +]"
                    else if (lockCost[i] == -1)
                        str += "[All -]"
                    else if (lockICost[i] == 1)
                        str += "[All +i]"
                    else
                        str += "[All -i]"
                }
                else if (lockType[i] == 3)
                    str += "[ALL]"
                str += "#"
                if (lockCol[i] == 12)
                    isCopy = 1
            }
        }
        if isCopy
            str += ("Mimic: " + colName[getCopy])
        if (getAura[0] || (getAura[1] || (getAura[2] || getAura[3])))
        {
            str += "#- Effects -"
            if getAura[3]
                str += "#Cursed!"
            if getAura[0]
                str += "#Frozen! (1xRed)"
            if getAura[1]
                str += "#Eroded! (5xGreen)"
            if getAura[2]
                str += "#Painted! (3xBlue)"
        }
        if (getSal != -1)
            str += ("##SID: " + string(getSal))
    }
    else if (mouseType == 3)
        str = ("Input Point##SID: " + string(getSal))
    else if (mouseType == 4)
    {
        str = ("Output Point##SID: " + string(getSal))
        if getStuck
            str = (("Output Point##SID: " + string(getSal)) + "#!!! Not Enough Space !!!")
    }
    else if (mouseType == 5)
    {
        isCopy = 0
        if (lockCount == 0)
            str = "Empty Gate"
        else
        {
            str = "Gate#"
            for (i = 0; i &lt; lockCount; i += 1)
            {
                str += ((("Lock: " + doorName[lockType[i]]) + colName[lockCol[i]]) + ", Cost: ")
                if (lockType[i] == 0)
                {
                    if (lockICost[i] != 0)
                        str += (string(lockICost[i]) + "i")
                    else
                        str += string(lockCost[i])
                }
                else if (lockType[i] == 1)
                    str += "None"
                else if (lockType[i] == 2)
                {
                    if (lockCost[i] == 1)
                        str += "[All +]"
                    else if (lockCost[i] == -1)
                        str += "[All -]"
                    else if (lockICost[i] == 1)
                        str += "[All +i]"
                    else
                        str += "[All -i]"
                }
                else if (lockType[i] == 3)
                    str += "[ALL]"
                str += "#"
                if (lockCol[i] == 12)
                    isCopy = 1
            }
        }
        if isCopy
            str += ("Mimic: " + colName[getCopy])
    }
    else if (mouseType == 6)
    {
        str = "Kina, God of Keys and Doors#"
        str += "Lock: Master, Cost: ∞"
        if getAura[3]
            str += "#- Effects -#Cursed!"
    }
    draw_set_font(fMouseover)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    boxX = round((((mouse_x - view_xview[0]) * 800) / view_wview[0]))
    boxY = round((((mouse_y - view_yview[0]) * 608) / view_hview[0]))
    boxW = (string_width(str) + 16)
    boxH = (string_height(str) + 16)
    if ((boxX + boxW) &gt; 800)
        boxX -= boxW
    if ((boxY + boxH) &gt; 608)
        boxY -= boxH
    draw_set_color(c_white)
    draw_rectangle(boxX, boxY, (boxX + boxW), (boxY + boxH), 0)
    draw_set_color(c_silver)
    draw_rectangle((boxX + 1), (boxY + 1), (boxX + boxW), (boxY + boxH), 1)
    draw_text((boxX + 9), (boxY + 9), str)
    draw_text((boxX + 8), (boxY + 9), str)
    draw_text((boxX + 9), (boxY + 8), str)
    draw_set_color(c_black)
    draw_rectangle(boxX, boxY, (boxX + boxW), (boxY + boxH), 1)
    draw_text((boxX + 8), (boxY + 8), str)
    draw_set_color(c_white)
}
draw_set_alpha(1)
if ((pdaMode != 1) &amp;&amp; (instance_exists(objPlayer) &amp;&amp; (global.pmState != 0)))
{
    draw_set_font(fMouseover)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    boxX = pmGuiX
    boxY = pmGuiY
    boxW = pmGuiW
    boxH = pmGuiH
    draw_set_color(c_white)
    draw_rectangle(boxX, boxY, (boxX + boxW), (boxY + boxH), 0)
    draw_set_color(c_silver)
    draw_rectangle((boxX + 1), (boxY + 1), (boxX + boxW), (boxY + boxH), 1)
    if (global.pmState == 1)
    {
        draw_set_color(make_color_rgb(200, 255, 200))
        if (tmpType == 0)
            draw_rectangle(boxX, (boxY + 32), (boxX + boxW), (boxY + 64), 0)
        if (tmpType == 1)
            draw_rectangle(boxX, (boxY + 64), (boxX + boxW), (boxY + 96), 0)
        if (tmpType == 2)
            draw_rectangle(boxX, (boxY + 96), (boxX + boxW), (boxY + 128), 0)
    }
    draw_set_color(c_black)
    draw_rectangle(boxX, boxY, (boxX + boxW), (boxY + boxH), 1)
    draw_set_color(c_white)
    for (i = 0; i &lt; pmButtons; i += 1)
    {
        _bx = pmButX[i]
        _by = pmButY[i]
        _bw = pmButW[i]
        _bh = pmButH[i]
        if (pmButState[i] == global.pmState)
        {
            if getMarkButtonSelected(i)
                draw_set_color(pmButSelCol[i])
            else
                draw_set_color(pmButCol[i])
            draw_rectangle((boxX + _bx), (boxY + _by), (((boxX + _bx) + _bw) - 1), (((boxY + _by) + _bh) - 1), 0)
            draw_set_color(c_black)
            draw_rectangle((boxX + _bx), (boxY + _by), (((boxX + _bx) + _bw) - 1), (((boxY + _by) + _bh) - 1), 1)
            if (i &gt;= 20)
            {
                if (tmpCol == (i - 20))
                {
                    draw_rectangle(((boxX + _bx) - 2), ((boxY + _by) - 2), (((boxX + _bx) + _bw) + 1), (((boxY + _by) + _bh) + 1), 1)
                    draw_set_color(c_white)
                    draw_sprite_ext(sprMarkColSel, 0, ((boxX + _bx) + (_bw / 2)), ((boxY + _by) + (_bh / 2)), 1, 1, 0, c_white, 1)
                }
            }
            draw_set_color(c_white)
            if ((pmButSpr[i] != -1) &amp;&amp; (pmButInd[i] != -1))
                draw_sprite_ext(pmButSpr[i], pmButInd[i], ((boxX + _bx) + (_bw / 2)), ((boxY + _by) + (_bh / 2)), 1, 1, 0, c_black, 1)
        }
    }
    if (global.pmState == 1)
    {
        draw_set_color(c_black)
        draw_line(boxX, (boxY + 32), (boxX + boxW), (boxY + 32))
        draw_line(boxX, (boxY + 64), (boxX + boxW), (boxY + 64))
        draw_line(boxX, (boxY + 96), (boxX + boxW), (boxY + 96))
        draw_line(boxX, (boxY + 128), (boxX + boxW), (boxY + 128))
        draw_line((boxX + 32), (boxY + 32), (boxX + 32), (boxY + 128))
        draw_set_color(c_black)
        _str = string(tmpNum)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        draw_text((boxX + 140), (boxY + 80), _str)
        _str = tmpStr
        if (string_length(tmpStr) &gt;= 8)
            _str = (string_copy(tmpStr, 1, 8) + "...")
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        draw_text((boxX + 160), (boxY + 112), _str)
        draw_set_color(c_white)
    }
    else if (global.pmState == 2)
    {
        draw_set_color(c_black)
        _instr = "Type a note! \# = Line break"
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        draw_text((boxX + 200), (boxY + 48), _instr)
        draw_set_valign(fa_top)
        draw_text((boxX + (boxW / 2)), (boxY + 64), keyboard_string)
        draw_set_color(c_white)
    }
}
if global.fullscreenMode
{
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_rectangle(-1, -1, -160, 608, 0)
    draw_rectangle(800, -1, 960, 608, 0)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

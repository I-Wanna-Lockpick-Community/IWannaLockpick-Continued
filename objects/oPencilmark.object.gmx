<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main

if instance_number(oPencilmark) &gt;= 2{
    instance_destroy();
    exit;
}

//Mouse
oldMX = mouse_x;
oldMY = mouse_y;
oldXV = view_xview[0]; oldYV = view_yview[0];
oldWV = view_wview[0]; oldHV = view_hview[0];

//Temp mark variables (copied to every new mark)
tmpType = 0;
tmpSymbol = 0;
tmpNum = 0;
tmpStr = "";
tmpCol = 0;

//Alpha of pencilmarks
markAlpha = 0;
mouseTimer = 0;

//Color of pencilmarks
markCol = c_white;
markOut = c_black;

//Cute star
starA = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if oldXV == view_xview[0] &amp;&amp; oldYV == view_yview[0] &amp;&amp; oldWV == view_wview[0] &amp;&amp; oldHV == view_hview[0]{
    if oldMX != mouse_x || oldMY != mouse_y || global.pmState != 0{
        mouseTimer = 40;
    }
}
if mouseTimer &gt; 0{//Fade in marks
    markAlpha = min(markAlpha+1/25,1);
}else{//Fade out marks
    markAlpha = max(markAlpha-1/25,0);
}
mouseTimer = max(mouseTimer-1,0);
oldMX = mouse_x;
oldMY = mouse_y;

oldXV = view_xview[0]; oldYV = view_yview[0];
oldWV = view_wview[0]; oldHV = view_hview[0];

starA += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load pencilmarks
if instance_exists(objPlayerStart){
    scrInitPencilmark();
    scrLoadPencilmark(room);
    global.canMark = getValidMarkRoom(room);
}else{
    scrInitPencilmark();
}
//Temp mark variables (copied to every new mark)
tmpType = 0;
tmpSymbol = 0;
tmpNum = 0;
tmpStr = "";
tmpCol = 0;

oldMX = mouse_x;
oldMY = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Marks

if !global.canMark || global.inCutscene{exit;}

var _mx = 0;
var _my = 0;
var _mInd = 0;

//Actual pencilmarks

for(var i = 0; i &lt; 256; i += 1){
    if global.pmVis[i]{
        _mx = global.pmX[i];
        _my = global.pmY[i];
        scrMarkColor(global.pmCol[i]);
        if global.pmType[i] == 0{//Symbol
            draw_sprite_ext(sprStarGlow,0,_mx,_my,.4,.4,starA,markCol,.75);
            if markAlpha != 0{
                _mInd = 0;
                if global.pmVis[i]{
                    if global.curPM == i{_mInd = 1;}
                    draw_sprite_ext(sprMarkOrigin,_mInd,_mx,_my,1,1,0,c_white,markAlpha*.75);
                }
            }
            draw_sprite_ext(sprMarkSymbol,global.pmSymbol[i],_mx+1,_my,1,1,0,markOut,1);
            draw_sprite_ext(sprMarkSymbol,global.pmSymbol[i],_mx-1,_my,1,1,0,markOut,1);
            draw_sprite_ext(sprMarkSymbol,global.pmSymbol[i],_mx,_my+1,1,1,0,markOut,1);
            draw_sprite_ext(sprMarkSymbol,global.pmSymbol[i],_mx,_my-1,1,1,0,markOut,1);
            draw_sprite_ext(sprMarkSymbol,global.pmSymbol[i],_mx,_my,1,1,0,markCol,1);
        }else if global.pmType[i] == 1{//Number
            draw_sprite_ext(sprStarGlow,0,_mx,_my,.4,.4,starA,markCol,.75);
            if markAlpha != 0{
                _mInd = 0;
                if global.pmVis[i]{
                    if global.curPM == i{_mInd = 1;}
                    draw_sprite_ext(sprMarkOrigin,_mInd,_mx,_my,1,1,0,c_white,markAlpha*.75);
                }
            }
            var _str = string(global.pmNum[i]);
            draw_set_font(fMiniID);
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            draw_set_color(markOut);
            draw_text(_mx+1,_my,_str);
            draw_text(_mx-1,_my,_str);
            draw_text(_mx,_my+1,_str);
            draw_text(_mx,_my-1,_str);
            draw_set_color(markCol);
            draw_text(_mx,_my,_str);
        }else{//Text
            if markAlpha != 0{
                _mInd = 0;
                if global.pmVis[i]{
                    if global.curPM == i{_mInd = 1;}
                    draw_sprite_ext(sprMarkOrigin,_mInd,_mx,_my,1,1,0,c_white,markAlpha*.75);
                }
            }
            var _str = global.pmStr[i];
            draw_set_font(fMiniID);
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            draw_set_color(c_black);
            draw_set_alpha(.35);
            draw_text(_mx+2,_my+2,_str);
            draw_set_alpha(1);
            draw_set_color(markOut);
            draw_text(_mx+1,_my,_str);
            draw_text(_mx-1,_my,_str);
            draw_text(_mx,_my+1,_str);
            draw_text(_mx,_my-1,_str);
            draw_set_color(markCol);
            draw_text(_mx,_my,_str);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

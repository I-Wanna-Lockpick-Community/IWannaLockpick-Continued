<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(object_index) &gt; 1)
    instance_destroy()
global.copyUniAmt = 0
global.copyUniTime = shader_get_uniform(shdRainbowStripe2, "time")
global.doorHue = 0
global.doorCol1 = make_color_hsv(global.doorHue, 125, 255)
global.doorCol2 = make_color_hsv(global.doorHue, 180, 230)
global.doorCol3 = make_color_hsv(global.doorHue, 255, 190)
global.runSwitch = 0
runMsgA = 360
runMsgAlpha = 0
pauseAlpha = 0
pauseFade = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev, global.windowYPrev)
    window_set_size(global.windowWidthPrev, global.windowHeightPrev)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_pause_sound(global.currentMusic)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objWorld)
{
    texture_set_interpolation(global.smoothingMode)
    getControlMode()
    if (global.controllerEnabled &amp;&amp; (global.controllerIndex != -1))
    {
        if (!global.controllerMode)
        {
            if keyboard_check_pressed(vk_anykey)
                global.controllerDelay = -1
            else if (scrAnyControllerButton() != -1)
            {
                if (global.controllerDelay == -1)
                    global.controllerDelay = global.controllerDelayLength
            }
        }
        else if keyboard_check_pressed(vk_anykey)
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength
        }
        else if (scrAnyControllerButton() != -1)
            global.controllerDelay = -1
        if (global.controllerDelay != -1)
        {
            if (global.controllerDelay == 0)
            {
                global.controllerMode = (!global.controllerMode)
                global.controllerDelay = -1
            }
            else
                global.controllerDelay -= 1
        }
    }
    canAction = ((!global.inCutscene) &amp;&amp; (instance_exists(objPlayer) &amp;&amp; ((room != rIntro) &amp;&amp; ((room != rIntro2) &amp;&amp; (room != rTitleNew)))))
    canAction = (canAction &amp;&amp; ((!instance_exists(oWorldTransition)) &amp;&amp; ((!instance_exists(oLevelTransition)) &amp;&amp; ((!instance_exists(oTitleTransition)) &amp;&amp; ((!instance_exists(oIntroTransition)) &amp;&amp; (!instance_exists(oLevelWinInvalid)))))))
    if global.gameStarted
    {
        if (global.pauseDelay &lt;= 0)
        {
            if scrButtonCheckPressed(global.pauseButton)
            {
                if ((!global.gamePaused) &amp;&amp; canAction)
                {
                    if ((!global.noPause) &amp;&amp; (!global.inCutscene))
                    {
                        global.gamePaused = 1
                        global.canExitLevel = (global.inLevel &amp;&amp; (instance_exists(objPlayer) &amp;&amp; (!global.inCutscene)))
                        global.pauseDelay = global.pauseDelayLength
                        scrPauseMusic()
                        with (oMouseover)
                        {
                            if (markIsNew &amp;&amp; (global.curPM != -1))
                                scrRemoveMark(global.curPM)
                            global.curPM = -1
                            global.pmState = 0
                        }
                        instance_deactivate_all(true)
                        instance_create(0, 0, oPauseManager)
                        pauseFade = 1
                        global.pauseSurf = surface_create(surface_get_width(application_surface), surface_get_height(application_surface))
                        surface_copy(global.pauseSurf, 0, 0, application_surface)
                    }
                }
                else
                {
                    global.pauseDelay = global.pauseDelayLength
                    with (oPauseManager)
                    {
                        if (mode == -1)
                            event_user(0)
                    }
                }
            }
        }
        else
            global.pauseDelay -= 1
        if (!global.gamePaused)
        {
            if (scrButtonCheckPressed(global.restartButton) &amp;&amp; (canAction &amp;&amp; (global.pmState == 0)))
            {
                audio_stop_sound(global.deathSound)
                audio_stop_sound(global.gameOverMusic)
                audio_resume_sound(global.currentMusic)
                if global.musicFading
                {
                    global.musicFading = 0
                    audio_sound_gain(global.currentMusic, global.currentGain, 0)
                    alarm[0] = -1
                }
                scrSaveGame(0)
                with (objPlayer)
                    instance_destroy()
                room_restart()
            }
            else if (scrButtonCheckPressed(global.leaveButton) &amp;&amp; (canAction &amp;&amp; (global.inLevel &amp;&amp; (global.pmState == 0))))
            {
                with (objPlayer)
                {
                    event_user(1)
                    instance_destroy()
                }
                global.inLevel = 0
                t = instance_create(0, 0, oWorldTransition)
                if global.outerLevelTele
                {
                    t.telePlayer = 1
                    t.teleX = global.levelEnteredX
                    t.teleY = global.levelEnteredY
                    global.outerLevelTele = 0
                }
                t.roomTo = global.roomOuter
            }
            if ((global.timeWhenDead || instance_exists(objPlayer)) &amp;&amp; instance_exists(objPlayerStart))
            {
                global.timeMicro += delta_time
                global.time += (global.timeMicro div 1000000)
                global.timeMicro %= 1000000
            }
        }
        scrSetRoomCaption()
    }
}
if (global.debugMode &amp;&amp; (global.gameStarted &amp;&amp; (!global.gamePaused)))
{
    if keyboard_check(vk_tab)
    {
        with (objPlayer)
        {
            x = mouse_x
            y = mouse_y
        }
    }
    if keyboard_check_pressed(vk_backspace)
    {
    }
    if keyboard_check_pressed(vk_insert)
    {
        with (objPlayer)
        {
            scrSaveGame(1)
            scrPlaySoundExt(sndItem, 1, 1, false)
        }
    }
    if keyboard_check_pressed(vk_delete)
        global.debugShowHitbox = (!global.debugShowHitbox)
    if keyboard_check_pressed(vk_home)
        global.debugNoDeath = (!global.debugNoDeath)
    if keyboard_check_pressed(vk_end)
        global.debugInfJump = (!global.debugInfJump)
    if (keyboard_check_pressed(vk_pageup) &amp;&amp; (room != room_last))
    {
        with (objPlayer)
            instance_destroy()
        room_goto_next()
    }
    if (keyboard_check_pressed(vk_pagedown) &amp;&amp; (room != room_first))
    {
        with (objPlayer)
            instance_destroy()
        room_goto_previous()
    }
}
if global.debugVisuals
{
    with (objPlayer)
    {
        if global.debugNoDeath
            image_alpha = 0.7
        else
            image_alpha = 1
        if global.debugInfJump
            image_blend = c_blue
        else
            image_blend = c_white
    }
}
if keyboard_check_pressed(vk_escape)
{
}
if (keyboard_check_pressed(vk_f2) &amp;&amp; (canAction &amp;&amp; (global.pmState == 0)))
{
    global.autosave = 0
    scrRestartGame()
    exit
}
if keyboard_check_pressed(vk_f3)
{
    global.smoothingMode = (!global.smoothingMode)
    scrSaveConfigNew()
}
if (keyboard_check_pressed(vk_f4) &amp;&amp; (!global.gamePaused))
{
    global.fullscreenMode = (!global.fullscreenMode)
    window_set_fullscreen(global.fullscreenMode)
    scrSaveConfigNew()
}
if (keyboard_check_pressed(vk_f5) &amp;&amp; (!global.gamePaused))
    scrResetWindowSize()
if (keyboard_check(vk_shift) &amp;&amp; (keyboard_check(vk_control) &amp;&amp; (keyboard_check_pressed(ord("D")) &amp;&amp; (global.gameStarted &amp;&amp; (!global.gamePaused)))))
{
    scrDeleteAllSaveMarks()
    scrInitPencilmark()
    with (oMouseover)
        mouseState = -1
    with (oPencilmark)
    {
        tmpType = 0
        tmpSymbol = 0
        tmpNum = 0
        tmpStr = ""
        tmpCol = 0
        global.pmState = 0
    }
    scrPlaySoundExt(sndCrumble, 1, 1, false)
}
if (keyboard_check(vk_control) &amp;&amp; (keyboard_check_pressed(ord("M")) &amp;&amp; (!global.gamePaused)))
{
    scrToggleMusic()
    scrSaveConfigNew()
}
if global.muteMusic
    scrStopMusic()
global.copyUniAmt = ((global.copyUniAmt + 0.0004) % 72)
shader_set(shdRainbowStripe2)
shader_set_uniform_f(global.copyUniTime, global.copyUniAmt)
shader_reset()
global.doorHue = ((global.doorHue + 0.75) % 255)
global.doorCol1 = make_color_hsv(global.doorHue, 125, 255)
global.doorCol2 = make_color_hsv(global.doorHue, 180, 230)
global.doorCol3 = make_color_hsv(global.doorHue, 255, 190)
if (scrButtonCheckPressed(global.rsButton) &amp;&amp; (instance_exists(objPlayer) &amp;&amp; ((room != rIntro) &amp;&amp; (global.pmState == 0))))
{
    global.runSwitch = (!global.runSwitch)
    scrPlaySoundExt(sndRunswitch, 1, (0.7 + (0.3 * global.runSwitch)), false)
    runMsgA = 0
    runMsgAlpha = 0
}
if (runMsgA &lt; 360)
{
    runMsgA = min((runMsgA + 3), 360)
    runMsgAlpha = abs(sin(degtorad(runMsgA)))
}
else
    runMsgAlpha = 0
if (pauseFade == 0)
    pauseAlpha = max((pauseAlpha - 0.04), 0)
else
    pauseAlpha = min((pauseAlpha + 0.04), 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_all()
if surface_exists(global.pauseSurf)
    surface_free(global.pauseSurf)
scrSaveConfigNew()
io_clear()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.musicFading = 1
global.currentGain = audio_sound_get_gain(global.currentMusic)
audio_sound_gain(global.currentMusic, 0, 1000)
alarm[0] = 50
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objPlayMusic))
    scrGetMusic()
room_speed = 50
scrSetRoomCaption()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _isPart2;
scrInitializeGlobals()
if file_exists("config.ini")
{
    ini_open("config.ini")
    _isPart2 = ini_read_real("Part2Check", "Check", 0)
    ini_close()
    if (!_isPart2)
        file_delete("config.ini")
}
scrLoadConfigNew()
room_goto(rTitleNew)
global.runSwitch = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.filter == 1)
{
    shader_set(shdColorblind)
    draw_surface(application_surface, 0, 0)
    shader_reset()
}
else if (global.filter == 2)
{
    shader_set(shdColorblind2)
    draw_surface(application_surface, 0, 0)
    shader_reset()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texture_set_interpolation(global.smoothingMode)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
texture_set_interpolation(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var runTop, runBot, drawX, drawY, drawAlign;
draw_set_alpha(runMsgAlpha)
draw_set_font(fMiniID)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
if global.runSwitch
{
    runTop = make_color_rgb(230, 255, 230)
    runBot = make_color_rgb(230, 200, 150)
    drawTextGradient(4, 4, (("[" + getBindStr(global.rsButton, global.usingController)) + "] Auto-Run is on"), runTop, runBot, 1)
}
else
{
    runTop = make_color_rgb(220, 255, 230)
    runBot = make_color_rgb(100, 220, 140)
    drawTextGradient(4, 4, (("[" + getBindStr(global.rsButton, global.usingController)) + "] Auto-Run is off"), runTop, runBot, 1)
}
draw_set_alpha(1)
draw_set_halign(fa_left)
draw_set_alpha(1)
if global.debugOverlay
{
    draw_set_color(c_black)
    draw_set_halign(fa_left)
    draw_set_font(fDefault12)
    drawX = 0
    drawY = 0
    drawAlign = 0
    if instance_exists(objPlayer)
    {
        drawX = objPlayer.x
        drawY = objPlayer.y
        drawAlign = (objPlayer.x % 3)
    }
    scrDrawTextOutline(20, 20, ("X: " + string(drawX)), c_black, c_white)
    scrDrawTextOutline(20, 40, ("Y: " + string(drawY)), c_black, c_white)
    scrDrawTextOutline(20, 60, ("Align: " + string(drawAlign)), c_black, c_white)
    scrDrawTextOutline(20, 80, ("Room name: " + room_get_name(room)), c_black, c_white)
    scrDrawTextOutline(20, 100, ("Room number: " + string(room)), c_black, c_white)
    scrDrawTextOutline(20, 120, ("God mode: " + string(global.debugNoDeath)), c_black, c_white)
    scrDrawTextOutline(20, 140, ("Infinite jump: " + string(global.debugInfJump)), c_black, c_white)
    scrDrawTextOutline(20, 160, ("FPS: " + string(fps)), c_black, c_white)
    scrDrawTextOutline(20, 180, ("Real FPS: " + string(fps_real)), c_black, c_white)
}
if global.gamePaused
{
    draw_clear(c_black)
    if surface_exists(global.pauseSurf)
        draw_surface(global.pauseSurf, 0, 0)
    draw_set_color(c_black)
    draw_set_alpha(pauseAlpha)
    draw_rectangle(-1, -1, display_get_gui_width(), display_get_gui_height(), 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
if (global.debugMode &amp;&amp; (room == rTitle))
{
    draw_set_color(c_red)
    draw_set_font(fDefault12)
    draw_set_halign(fa_left)
    draw_text(34, 34, "Debug mode")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.complexMode = 0;
for(var i=0;i&lt;key_TYPES;i+=1){
    global.key[i] = 0;
    global.ikey[i] = 0;
    global.star[i] = 0;
    show[i] = -1;//The list of key *types* to be shown
}
long = 0;//0 = Short box, 1 = Long box, 2 = VERY long box
stone = 0;//The level select key display
goldIndex = 0;//Gold/Pure image index
starAngle = 0;//For the cute glowy star when a key is starred
starCol = make_color_rgb(255,255,180);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KEY ENCYCLOPEDIA
/*
0 = Master Key (Opens any door)
1 = White Key
2 = Orange Key
3 = Purple Key
4 = Red Key
5 = Green Key
6 = Blue Key
7 = Pink Key
8 = Cyan Key
9 = Black Key
10 = Brown Key
11 = Pure Key
12 = Glitch Key
13 = Stone Key
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch long{
    case 0:
        spr = sprKeyBox;
        width = 107;
    break;
    case 1:
        spr = sprKeyBoxLong
        width = 139;
    break;
    case 2:
        spr = sprKeyBoxLonger
        width = 203;
    break;
}
global.stoneKeys = 0;
for(var i=0;i&lt;14;i+=1){
    if global.areaClear[i] == 1{
        global.stoneKeys += 1;
        global.key[key_STONE] = global.stoneKeys;
    }
}
if global.allUnlock{global.stoneKeys = 14; global.key[key_STONE] = 14;}
if stone{
    global.stoneKeys = 0;
    for(var i=0;i&lt;12;i+=1){
        if global.areaClear[i] == 1{
            global.stoneKeys += 1;
            global.key[key_STONE] = global.stoneKeys;
        }
    }
    depth = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = 0;
for(var i = 0; i &lt; 16; i += 1){
    if show[i] != -1{
        size += 1;
    }
}
if stone{size = 1;}

goldIndex = (goldIndex + .1) mod 4;
starAngle = (starAngle + 2.2) mod 360;

if size &gt;= 1{
    //Shadow of box
    draw_sprite_part_ext(spr,0,0,0,width,16,x-14,y-14,1,1,c_gray,1);
    for(var i = 0; i &lt; size; i+=1){
        draw_sprite_part_ext(spr,0,0,16,width,40,x-14,y+2+40*i,1,1,c_gray,1);
    }
    draw_sprite_part_ext(spr,0,0,56,width,7,x-14,y+2+40*size,1,1,c_gray,1);
    //Wooden box around keys
    draw_sprite_part(spr,0,0,0,width,16,x-16,y-16);
    for(var i = 0; i &lt; size; i+=1){
        draw_sprite_part(spr,0,0,16,width,40,x-16,y+40*i);
    }
    draw_sprite_part(spr,0,0,56,width,7,x-16,y+40*size);
    
    for(var i = 0; i &lt; 16; i += 1){
        drawY = y + 40*i;
        if show[i] != -1{
            if global.star[show[i]] == 1{
                draw_sprite_ext(sprStarGlow,0,x-4+16,drawY-4+16,.4,.4,starAngle,starCol,1);
            }
            draw_set_alpha(1);
            draw_set_color(c_white);
            if show[i] == key_MASTER{
                draw_sprite(sprKMaster,floor(goldIndex),x-4,drawY-4);
            }else if show[i] == key_PURE{
                draw_sprite(sprKPure,floor(goldIndex),x-4,drawY-4);
            }else if show[i] == key_GLITCH{
                color = show[i];
                scrColorKey();
                shader_set(shdRainbowStripe2);
                draw_sprite(sprKey,3,x-4,drawY-4);
                draw_sprite_ext(sprKey,1,x-4,drawY-4,1,1,0,blend,1);
                shader_reset();
            }else if show[i] == key_STONE{
                draw_sprite(sprKStone,0,x-4,drawY-4);
            } else if show[i] == key_SILVER {
                draw_sprite(sprKSilver,floor(goldIndex),x-4,drawY-4);
            // @addcolor if anim or shader
} else {
                color = show[i];
                scrColorKey();
                draw_sprite(sprKey,0,x-4,drawY-4);
                draw_sprite_ext(sprKey,1,x-4,drawY-4,1,1,0,blend,1);
            }
            draw_set_color(make_color_rgb(44,34,28));
            draw_set_font(fKeyX);
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            //draw_text(x+36,drawY-3,"x");
            draw_set_font(fKeyNum);
            if global.key[show[i]] == 0{
                if global.ikey[show[i]] == 0{
                    var countString = "0";
                }else{
                    var countString = string(global.ikey[show[i]])+"i";
                }
            }else{
                if global.ikey[show[i]] == 0{
                    var countString = string(global.key[show[i]]);
                }else if global.ikey[show[i]] &gt; 0{
                    var countString = string(global.key[show[i]])+"+"+string(global.ikey[show[i]])+"i";
                }else{
                    var countString = string(global.key[show[i]])+string(global.ikey[show[i]])+"i";//- in string
                }
            }
            draw_text(x+34,drawY-6,"x");
            draw_text(x+54,drawY-6,countString);
            draw_set_color(c_white);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

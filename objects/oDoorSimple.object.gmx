<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDoorEditor</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>maskDoor</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>salvageID = -1
active = 1
color = 0
colorSpend = 0
colorCopy = 12
tempColor = 0
tempSpend = 0
count = 1
icount = 0
type = 0
copies = 1
icopies = 0
iPow = 0
aura[0] = 0
aura[1] = 0
aura[2] = 0
browned = 0
brownAngle = 0
brownNearPlayer = 0
w = 1
h = 1
goldIndex = 0
goldSpd = 0.1
aaState = 0
aaTime = 0
copyState = 0
copyPitch = 1
copyAlpha = 0
copySound = 0
copyTimer = 0
copyDraw = 1
c1 = 16777215
c2 = 16777215
c3 = 16777215
image_speed = 0
myLight = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myLight != self)
{
    with (myLight)
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
if browned
{
    alarm[0] = 120
    for (ix = 0; ix &lt; (2 * w); ix += 1)
    {
        for (iy = 0; iy &lt; (2 * h); iy += 1)
        {
            with (instance_create(((x + random_range(4, 12)) + (16 * ix)), ((y + random_range(4, 12)) + (16 * iy)), oBrownParticle))
            {
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>undoReposition()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var canGoldOpen;
if (global.complexMode == 0)
{
    if (copies &gt; 0)
        iPow = 0
    if (copies &lt; 0)
        iPow = 2
    if (copies == 0)
    {
        if (icopies &gt; 0)
            iPow = 1
        if (icopies &lt; 0)
            iPow = 3
    }
}
else
{
    if (icopies &gt; 0)
        iPow = 1
    if (icopies &lt; 0)
        iPow = 3
    if (icopies == 0)
    {
        if (copies &gt; 0)
            iPow = 0
        if (copies &lt; 0)
            iPow = 2
    }
}
switch copyState
{
    case 0:
        break
    case 1:
        copyPitch += 0.015
        audio_sound_pitch(copySound, copyPitch)
        copyTimer = min((copyTimer + 1), 50)
        copyAlpha = max((copyAlpha - 0.02), 0)
        if (copyTimer == 50)
            copyState = 0
        break
    case 2:
        copyTimer = min((copyTimer + 1), 60)
        if (copyTimer == 25)
            scrPlaySoundExt(sndCopy1, 1, 1, false)
        if (copyTimer == 40)
            scrPlaySoundExt(sndMasterRelock, 1, 1, false)
        if (copyTimer == 50)
        {
            copyDraw = 1
            copyAlpha = 1
        }
        if (copyTimer &gt; 50)
            copyAlpha = max((copyAlpha - 0.1), 0)
        if (copyTimer == 60)
            copyState = 0
        break
    default:
    
}

if (!instance_exists(objPlayer))
    exit
distToP = distance_to_object(objPlayer)
if (copyState != 0)
    exit
if (!active)
{
    brownNearPlayer = 0
    visible = 0
    exit
}
brownNearPlayer = 0
if browned
{
    tempColor = 10
    tempSpend = 10
}
else
{
    tempColor = color
    tempSpend = colorSpend
}
canChangeBrowned = (browned || ((color != 11) &amp;&amp; ((colorSpend != 11) &amp;&amp; (colorCopy != 11))))
if ((aura[0] == 1) || ((aura[1] == 1) || (aura[2] == 1)))
{
    if (distToP &lt;= 23)
    {
        removeAuras()
        if (objPlayer.brownMode != 0)
        {
            if canChangeBrowned
                enbrownDoor()
        }
    }
    else
        brownNearPlayer = 0
    exit
}
if (objPlayer.brownMode != 0)
{
    if canChangeBrowned
    {
        if (distToP &lt;= 23)
            enbrownDoor()
        else
            brownNearPlayer = 0
    }
}
if (distToP &gt; 23)
    brownNearPlayer = 0
if browned
{
    tempColor = 10
    tempSpend = 10
}
else
{
    tempColor = color
    tempSpend = colorSpend
}
if (global.complexMode == 0)
{
    if (copies &gt; 0)
        iPow = 0
    if (copies &lt; 0)
        iPow = 2
    if (copies == 0)
    {
        if (icopies &gt; 0)
            iPow = 1
        if (icopies &lt; 0)
            iPow = 3
    }
}
else
{
    if (icopies &gt; 0)
        iPow = 1
    if (icopies &lt; 0)
        iPow = 3
    if (icopies == 0)
    {
        if (copies &gt; 0)
            iPow = 0
        if (copies &lt; 0)
            iPow = 2
    }
}
canGoldOpen = (!((tempColor == 0) || ((tempColor == 11) || ((tempSpend == 0) || ((tempSpend == 11) || (((colorCopy == 0) || (colorCopy == 11)) &amp;&amp; (browned == 0)))))))
if (distToP &lt;= 1)
{
    if (canGoldOpen &amp;&amp; (objPlayer.masterMode != 0))
    {
        scrNormalMasterOpen()
        undoBUFFER()
        scrPlayerDownStop()
    }
    else if ((objPlayer.masterMode == 0) || (!canGoldOpen))
    {
        if (type == 0)
        {
            if canOpen(tempColor, iPow)
            {
                if (!isStar(tempSpend, colorCopy))
                    addComplexKeys(tempSpend, colorCopy, (-count), (-icount), iPow)
                scrOpenOrCopy()
                scrBroadcastCopy(tempSpend, colorCopy)
            }
        }
        if (type == 1)
        {
            if canOpen(tempColor, iPow)
            {
                scrOpenOrCopy()
                scrBroadcastCopy(tempSpend, colorCopy)
            }
        }
        if (type == 2)
        {
            if canOpen(tempColor, iPow)
            {
                if (!isStar(tempSpend, colorCopy))
                {
                    if ((iPow == 0) || (iPow == 2))
                        addComplexKeys(tempSpend, colorCopy, ((-getCountGlitch(tempColor, colorCopy)) * abs(sign(count))), ((-getICountGlitch(tempColor, colorCopy)) * abs(sign(icount))), 0)
                    else
                        addComplexKeys(tempSpend, colorCopy, ((-getCountGlitch(tempColor, colorCopy)) * abs(sign(icount))), ((-getICountGlitch(tempColor, colorCopy)) * abs(sign(count))), 0)
                }
                scrOpenOrCopy()
                scrBroadcastCopy(tempSpend, colorCopy)
            }
        }
        if (type == 3)
        {
            if canOpen(tempColor, iPow)
            {
                if (!isStar(tempSpend, colorCopy))
                    addComplexKeys(tempSpend, colorCopy, (-getCountGlitch(tempColor, colorCopy)), (-getICountGlitch(tempColor, colorCopy)), 0)
                scrOpenOrCopy()
                scrBroadcastCopy(tempSpend, colorCopy)
            }
        }
    }
}
useMasterCheck()
visible = active
if (active == 0)
    brownNearPlayer = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
global.inCutscene = 1
scrSalvageCutscene()
with (oSalvageIn)
{
    if active
    {
        other.xT = (x - 8)
        other.yT = (y - 24)
        alarm[0] = 25
    }
}
for (ix = 0; ix &lt; (2 * w); ix += 1)
{
    for (iy = 0; iy &lt; (2 * h); iy += 1)
    {
        with (instance_create((x + (16 * ix)), (y + (16 * iy)), oDebrisS))
        {
            c1 = other.c1
            c2 = other.c2
            c3 = other.c3
            xT = other.xT
            yT = other.yT
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempColor = color
tempSpend = colorSpend
scrColorDoor()
scrColorDoor2()
image_xscale = w
image_yscale = h
if ((w == 1) &amp;&amp; (h == 2))
{
    image_xscale = 1
    image_yscale = 1
    mask_index = maskDoor1x2
}
if ((w == 2) &amp;&amp; (h == 2))
{
    image_xscale = 1
    image_yscale = 1
    mask_index = maskDoor2x2
}
if ((w &gt;= 4) || (h &gt;= 4))
    mask_index = sprBlockMask
myLight = self
if (instance_exists(oLightsW5) || (instance_exists(oLightsW4) || (instance_exists(oLightsW6) || (instance_exists(oBGW7) || (instance_exists(oLightsW9) || instance_exists(oBGW12))))))
{
    myLight = instance_create((x + (16 * w)), (y + (16 * h)), oLight)
    myLight.parent = id
    myLight.image_xscale = (0.2 * max(w, h))
    myLight.image_yscale = myLight.image_xscale
    myLight.image_blend = c1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
if browned
{
    alarm[0] = 120
    for (ix = 0; ix &lt; (2 * w); ix += 1)
    {
        for (iy = 0; iy &lt; (2 * h); iy += 1)
        {
            with (instance_create(((x + random_range(4, 12)) + (16 * ix)), ((y + random_range(4, 12)) + (16 * iy)), oBrownParticle))
                scale = random_range(0.2, 0.5)
        }
    }
}
else
{
    for (ix = 0; ix &lt; (2 * w); ix += 1)
    {
        for (iy = 0; iy &lt; (2 * h); iy += 1)
        {
            with (instance_create(((x + random_range(4, 12)) + (16 * ix)), ((y + random_range(4, 12)) + (16 * iy)), oBrownParticle))
            {
                scale = random_range(0.2, 0.5)
                mode = 1
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
copyState = 2
copyDraw = 0
copyAlpha = 0
copyTimer = 0
for (ix = 0; ix &lt; (2 * w); ix += 1)
{
    for (iy = 0; iy &lt; (2 * h); iy += 1)
    {
        with (instance_create((x + (16 * ix)), (y + (16 * iy)), oDebris3))
        {
            c1 = other.c1
            c2 = other.c2
            c3 = other.c3
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
copyState = 1
copySound = scrPlaySoundExt(sndMasterUnlock2, 1, 1, false)
copyPitch = 1
copyAlpha = 1
copyTimer = 0
for (ix = 0; ix &lt; (2 * w); ix += 1)
{
    for (iy = 0; iy &lt; (2 * h); iy += 1)
    {
        with (instance_create((x + (16 * ix)), (y + (16 * iy)), oDebris2))
        {
            c1 = other.c1
            c2 = other.c2
            c3 = other.c3
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix, iy;
for (ix = 0; ix &lt; (2 * w); ix += 1)
{
    for (iy = 0; iy &lt; (2 * h); iy += 1)
    {
        with (instance_create((x + (16 * ix)), (y + (16 * iy)), oDebris))
        {
            c1 = other.c1
            c2 = other.c2
            c3 = other.c3
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempColor = color
tempSpend = colorSpend
scrColorDoor()
scrColorDoor2()
image_xscale = w
image_yscale = h
if ((w == 1) &amp;&amp; (h == 2))
{
    image_xscale = 1
    image_yscale = 1
    mask_index = maskDoor1x2
}
if ((w == 2) &amp;&amp; (h == 2))
{
    image_xscale = 1
    image_yscale = 1
    mask_index = maskDoor2x2
}
if ((w &gt;= 4) || (h &gt;= 4))
    mask_index = sprBlockMask
myLight = self
if (instance_exists(oLightsW5) || (instance_exists(oLightsW4) || (instance_exists(oLightsW6) || (instance_exists(oBGW7) || (instance_exists(oLightsW9) || instance_exists(oBGW12))))))
{
    myLight = instance_create((x + (16 * w)), (y + (16 * h)), oLight)
    myLight.parent = id
    myLight.image_xscale = (0.2 * max(w, h))
    myLight.image_yscale = myLight.image_xscale
    myLight.image_blend = c1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var copiesString;
draw_set_alpha(1)
if (copyState == 1)
{
    draw_set_blend_mode_ext(10, 6)
    draw_sprite_ext(sprBlockWhite, 0, x, y, w, h, 0, make_color_hsv(0, 0, (255 * copyAlpha)), copyAlpha)
    draw_set_blend_mode(0)
}
if (copyState == 2)
    draw_sprite_ext(sprBlockWhite, 0, x, y, w, h, 0, c_white, copyAlpha)
if ((copies != 1) || (icopies != 0))
{
    draw_set_font(fKeyX)
    draw_set_halign(fa_center)
    draw_set_valign(fa_bottom)
    draw_set_color(make_color_rgb(62, 45, 28))
    copiesString = "×"
    if (icopies == 0)
        copiesString += string(copies)
    else if (copies == 0)
        copiesString += (string(icopies) + "i")
    else
    {
        copiesString += string(copies)
        if (icopies &gt; 0)
            copiesString = (((copiesString + "+") + string(icopies)) + "i")
        else
            copiesString = ((copiesString + string(icopies)) + "i")
    }
    draw_text(((x + 1) + (16 * w)), (y + 7), copiesString)
    draw_text(((x - 1) + (16 * w)), (y + 7), copiesString)
    draw_text(((x + 1) + (16 * w)), (y + 9), copiesString)
    draw_text(((x - 1) + (16 * w)), (y + 9), copiesString)
    draw_text(((x + 1) + (16 * w)), (y + 8), copiesString)
    draw_text(((x - 1) + (16 * w)), (y + 8), copiesString)
    draw_text((x + (16 * w)), (y + 7), copiesString)
    draw_text((x + (16 * w)), (y + 9), copiesString)
    draw_set_color(make_color_rgb(237, 234, 231))
    draw_text((x + (16 * w)), (y + 8), copiesString)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tempW, tempH, tempX, tempY;
if (copyDraw == 1)
{
    goldIndex = ((goldIndex + goldSpd) % 4)
    if (tempSpend == 0)
        draw_sprite_ext(sprDGoldGrad, floor(goldIndex), x, y, (w * 0.5), (h * 0.5), 0, c_white, 1)
    else if (tempSpend == 11)
        draw_sprite_ext(sprDPureGrad, floor(goldIndex), x, y, (w * 0.5), (h * 0.5), 0, c_white, 1)
    else if (tempSpend == 13)
        draw_sprite_ext(sprDStoneTexture, 0, x, y, (w * 0.5), (h * 0.5), 0, c_white, 1)
    else if (tempSpend == 12)
    {
        scrColorDoorArg(12)
        shader_set(shdRainbowStripe2)
        scrDrawDoorSpend()
        shader_reset()
        if (colorCopy != 12)
            scrDrawDoorGlitch(1)
        scrColorDoor()
        scrColorDoor2()
    }
    else
        scrDrawDoorSpend()
    tempW = ((32 * w) - 14)
    tempH = ((32 * h) - 14)
    tempX = (x + 7)
    tempY = (y + 7)
    if (tempColor == 0)
        draw_sprite_ext(sprDGoldGrad, floor(goldIndex), tempX, tempY, (tempW / 64), (tempH / 64), 0, c_white, 1)
    else if (tempColor == 11)
        draw_sprite_ext(sprDPureGrad, floor(goldIndex), tempX, tempY, (tempW / 64), (tempH / 64), 0, c_white, 1)
    else if (tempColor == 13)
        draw_sprite_ext(sprDStoneTexture, 0, tempX, tempY, (tempW / 64), (tempH / 64), 0, c_white, 1)
    else if (tempColor == 12)
    {
        scrColorDoorArg(12)
        shader_set(shdRainbowStripe2)
        scrDrawDoorRequire()
        shader_reset()
        if (colorCopy != 12)
            scrDrawDoorGlitch(0)
        scrColorDoor()
        scrColorDoor2()
    }
    else
        scrDrawDoorRequire()
    if global.simpleLock
        scrDrawDoorLockSimple()
    else
        scrDrawDoorLock()
    if aura[1]
    {
        if ((w == 1) &amp;&amp; (h == 1))
            draw_sprite(sprDirt, 0, x, y)
        if ((w == 1) &amp;&amp; (h == 2))
            draw_sprite(sprDirt1x2, 0, x, y)
        if ((w == 2) &amp;&amp; (h == 2))
            draw_sprite(sprDirt2x2, 0, x, y)
    }
    if aura[2]
    {
        draw_set_blend_mode(1)
        if ((w == 1) &amp;&amp; (h == 1))
            draw_sprite_ext(sprSol, 1, x, y, 1, 1, 0, make_color_rgb(255, 255, 255), 1)
        if ((w == 1) &amp;&amp; (h == 2))
            draw_sprite_ext(sprSol1x2, 1, x, y, 1, 1, 0, make_color_rgb(255, 255, 255), 1)
        if ((w == 2) &amp;&amp; (h == 2))
            draw_sprite_ext(sprSol2x2, 1, x, y, 1, 1, 0, make_color_rgb(255, 255, 255), 1)
        draw_set_blend_mode(0)
    }
    if aura[0]
    {
        if ((w == 1) &amp;&amp; (h == 1))
            draw_sprite(sprIce, 0, x, y)
        if ((w == 1) &amp;&amp; (h == 2))
            draw_sprite(sprIce1x2, 0, x, y)
        if ((w == 2) &amp;&amp; (h == 2))
            draw_sprite(sprIce2x2, 0, x, y)
        if ((w == 3) &amp;&amp; (h == 2))
            draw_sprite(sprIce3x2, 0, x, y)
    }
}
if (copyDraw == 0)
    scrDrawDoorLock()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
